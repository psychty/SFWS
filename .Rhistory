rename(Parent_cause = Cause_name) %>%
mutate(Cause = ifelse(nchar(Cause) < 40, Cause, sub('(.{1,40})(\\s|$)', '\\1\n', Cause))) %>%
mutate(Cause = factor(Cause, levels =  unique(Cause))) %>%
select(Area, Sex, Year, Cause, Cause_outline, Cause_id, Level, Estimate, Lower_estimate, Upper_estimate, Parent_cause, Parent_id, measure, metric)
Cause_number <- All_ages_GBD_cause_data %>%
filter(metric == "Number") %>%
group_by(measure, Year, Area, Sex) %>%
select(-c(Lower_estimate, Upper_estimate)) %>%
spread(measure, Estimate) %>%
ungroup()
Cause_rate <- All_ages_GBD_cause_data %>%
filter(metric == "Rate per 100,000 population") %>%
group_by(measure, Year, Area, Sex) %>%
select(-c(Lower_estimate, Upper_estimate)) %>%
spread(measure, Estimate) %>%
ungroup()
# Proportions of morbidity, mortality and dalys due to particular causes ####
Cause_perc <- All_ages_GBD_cause_data %>%
filter(metric == "Proportion of total burden caused by this condition") %>%
group_by(measure, Year, Area, Sex) %>%
select(-c(Lower_estimate, Upper_estimate)) %>%
spread(measure, Estimate) %>%
ungroup()
Area_x_cause_number <- Cause_number %>%
filter(Area == Area_x) %>%
arrange(Sex, Year, Cause_outline)
Area_x_cause_rate <- Cause_rate %>%
filter(Area == Area_x) %>%
arrange(Sex, Year, Cause_outline)
Area_x_cause_perc <- Cause_perc %>%
filter(Area == Area_x) %>%
arrange(Sex, Year, Cause_outline)
Area_x_cause <- Area_x_cause_number %>%
bind_rows(Area_x_cause_rate) %>%
bind_rows(Area_x_cause_perc)
Area_x_cause %>%
toJSON() %>%
write_lines('/Users/richtyler/Documents/Repositories/GBD/Deaths_cause_area_x.json')
Area_x_cause %>%
filter(Cause == "Ischemic heart disease") %>%
filter(Year == '2017') %>%
filter(Sex == 'Both') %>%
View()
write.csv(Area_x_cause, 'Users/richtyler/Documents/Respositories/GBD/Deaths_cause_area_x.csv')
write.csv(Area_x_cause, 'Users/richtyler/Documents/Respositories/GBD/Deaths_cause_area_x.csv')
write.csv(Area_x_cause, '/Users/richtyler/Documents/Respositories/GBD/Deaths_cause_area_x.csv')
write.csv(Area_x_cause, '/Users/richtyler/Documents/Repositories/GBD/Deaths_cause_area_x.csv')
Area_x_cause %>%
View()
Area_x_cause_2 <- Area_x_cause %>%
filter(is.na(Deaths))
View(Area_x_cause_2)
Area_x_cause_2 <- Area_x_cause %>%
filter(is.na(Deaths)) %>%
replace_na(Deaths, 0)
?replace_na()
Area_x_cause_2 <- Area_x_cause %>%
filter(is.na(Deaths)) %>%
mutate(Deaths = replace_na(Deaths, 0))
Area_x_cause_2 <- Area_x_cause %>%
filter(is.na(Deaths)) %>%
mutate_all(. = replace_na(., 0))
?mutate_at()
Area_x_cause_2 <- Area_x_cause %>%
filter(is.na(Deaths)) %>%
mutate_at(c('Deaths', 'Incidence', 'Prevalence'). = replace_na(., 0))
Area_x_cause_2 <- Area_x_cause %>%
filter(is.na(Deaths)) %>%
mutate_at(c('Deaths', 'Incidence', 'Prevalence'), = replace_na(., 0))
Area_x_cause_2 <- Area_x_cause %>%
filter(is.na(Deaths)) %>%
mutate_at(c('Deaths', 'Incidence', 'Prevalence'),  replace_na(., 0))
Area_x_cause_2 <- Area_x_cause %>%
filter(is.na(Deaths)) %>%
mutate_at(c('Deaths', 'Incidence', 'Prevalence'), . = replace_na(., 0))
Area_x_cause_2 <- Area_x_cause %>%
filter(is.na(Deaths)) %>%
mutate_at(c(Deaths, Incidence, Prevalence), . = replace_na(., 0))
Area_x_cause <- Area_x_cause_number %>%
bind_rows(Area_x_cause_rate) %>%
bind_rows(Area_x_cause_perc) %>%
mutate(Deaths = replace_na(Deaths, 0))
Area_x_cause %>%
toJSON() %>%
write_lines('/Users/richtyler/Documents/Repositories/GBD/Deaths_cause_area_x.json')
Area_x_cause <- Area_x_cause_number %>%
bind_rows(Area_x_cause_rate) %>%
bind_rows(Area_x_cause_perc) %>%
mutate(Deaths = replace_na(Deaths, 0)) %>%
mutate_all(., replace_na(., 0))
View(All_ages_GBD_cause_data)
All_ages_GBD_cause_data <- unique(list.files("~/Documents/GBD_data_download/")[grepl("e004c73d", list.files("~/Documents/GBD_data_download/")) == TRUE]) %>%
map_df(~read_csv(paste0("~/Documents/GBD_data_download/",.), col_types = cols(age = col_character(), cause = col_character(), location = col_character(), lower = col_double(), measure = col_character(), metric = col_character(), sex = col_character(), upper = col_double(), val = col_double(), year = col_number()))) %>%
filter(age != 'Age-standardized') %>%
rename(Area = location,
Lower_estimate = lower,
Upper_estimate = upper,
Estimate = val,
Year = year,
Sex = sex,
Age = age,
Cause = cause) %>%
mutate(Estimate = replace_na(Estimate, 0)) %>%
mutate(metric = ifelse(metric == "Rate", "Rate per 100,000 population", ifelse(metric == "Percent", "Proportion of total burden caused by this condition", metric))) %>%
left_join(GBD_2017_cause_hierarchy[c("Cause_name", "Cause_outline", "Cause_id", "Parent_id", "Level")], by = c("Cause" = "Cause_name")) %>%
left_join(GBD_2017_cause_hierarchy[c("Cause_name", "Cause_id")], by = c("Parent_id" = "Cause_id")) %>%
rename(Parent_cause = Cause_name) %>%
mutate(Cause = ifelse(nchar(Cause) < 40, Cause, sub('(.{1,40})(\\s|$)', '\\1\n', Cause))) %>%
mutate(Cause = factor(Cause, levels =  unique(Cause))) %>%
select(Area, Sex, Year, Cause, Cause_outline, Cause_id, Level, Estimate, Lower_estimate, Upper_estimate, Parent_cause, Parent_id, measure, metric)
Cause_number <- All_ages_GBD_cause_data %>%
filter(metric == "Number") %>%
group_by(measure, Year, Area, Sex) %>%
select(-c(Lower_estimate, Upper_estimate)) %>%
spread(measure, Estimate) %>%
ungroup()
Cause_rate <- All_ages_GBD_cause_data %>%
filter(metric == "Rate per 100,000 population") %>%
group_by(measure, Year, Area, Sex) %>%
select(-c(Lower_estimate, Upper_estimate)) %>%
spread(measure, Estimate) %>%
ungroup()
# Proportions of morbidity, mortality and dalys due to particular causes ####
Cause_perc <- All_ages_GBD_cause_data %>%
filter(metric == "Proportion of total burden caused by this condition") %>%
group_by(measure, Year, Area, Sex) %>%
select(-c(Lower_estimate, Upper_estimate)) %>%
spread(measure, Estimate) %>%
ungroup()
Area_x_cause_number <- Cause_number %>%
filter(Area == Area_x) %>%
arrange(Sex, Year, Cause_outline)
Area_x_cause_rate <- Cause_rate %>%
filter(Area == Area_x) %>%
arrange(Sex, Year, Cause_outline)
Area_x_cause_perc <- Cause_perc %>%
filter(Area == Area_x) %>%
arrange(Sex, Year, Cause_outline)
Area_x_cause <- Area_x_cause_number %>%
bind_rows(Area_x_cause_rate) %>%
bind_rows(Area_x_cause_perc)
Area_x_cause %>%
toJSON() %>%
write_lines('/Users/richtyler/Documents/Repositories/GBD/Deaths_cause_area_x.json')
write.csv(Area_x_cause, '/Users/richtyler/Documents/Repositories/GBD/Deaths_cause_area_x.csv')
View(Area_x_cause)
All_ages_GBD_cause_data <- unique(list.files("~/Documents/GBD_data_download/")[grepl("e004c73d", list.files("~/Documents/GBD_data_download/")) == TRUE]) %>%
map_df(~read_csv(paste0("~/Documents/GBD_data_download/",.), col_types = cols(age = col_character(), cause = col_character(), location = col_character(), lower = col_double(), measure = col_character(), metric = col_character(), sex = col_character(), upper = col_double(), val = col_double(), year = col_number()))) %>%
filter(age != 'Age-standardized') %>%
rename(Area = location,
Lower_estimate = lower,
Upper_estimate = upper,
Estimate = val,
Year = year,
Sex = sex,
Age = age,
Cause = cause) %>%
mutate(metric = ifelse(metric == "Rate", "Rate per 100,000 population", ifelse(metric == "Percent", "Proportion of total burden caused by this condition", metric))) %>%
left_join(GBD_2017_cause_hierarchy[c("Cause_name", "Cause_outline", "Cause_id", "Parent_id", "Level")], by = c("Cause" = "Cause_name")) %>%
left_join(GBD_2017_cause_hierarchy[c("Cause_name", "Cause_id")], by = c("Parent_id" = "Cause_id")) %>%
rename(Parent_cause = Cause_name) %>%
mutate(Cause = ifelse(nchar(Cause) < 40, Cause, sub('(.{1,40})(\\s|$)', '\\1\n', Cause))) %>%
mutate(Cause = factor(Cause, levels =  unique(Cause))) %>%
select(Area, Sex, Year, Cause, Cause_outline, Cause_id, Level, Estimate, Lower_estimate, Upper_estimate, Parent_cause, Parent_id, measure, metric)
Cause_number <- All_ages_GBD_cause_data %>%
filter(metric == "Number") %>%
group_by(measure, Year, Area, Sex) %>%
select(-c(Lower_estimate, Upper_estimate)) %>%
spread(measure, Estimate) %>%
ungroup()
Cause_rate <- All_ages_GBD_cause_data %>%
filter(metric == "Rate per 100,000 population") %>%
group_by(measure, Year, Area, Sex) %>%
select(-c(Lower_estimate, Upper_estimate)) %>%
spread(measure, Estimate) %>%
ungroup()
# Proportions of morbidity, mortality and dalys due to particular causes ####
Cause_perc <- All_ages_GBD_cause_data %>%
filter(metric == "Proportion of total burden caused by this condition") %>%
group_by(measure, Year, Area, Sex) %>%
select(-c(Lower_estimate, Upper_estimate)) %>%
spread(measure, Estimate) %>%
ungroup()
Area_x_cause_number <- Cause_number %>%
filter(Area == Area_x) %>%
arrange(Sex, Year, Cause_outline)
Area_x_cause_rate <- Cause_rate %>%
filter(Area == Area_x) %>%
arrange(Sex, Year, Cause_outline)
Area_x_cause_perc <- Cause_perc %>%
filter(Area == Area_x) %>%
arrange(Sex, Year, Cause_outline)
Area_x_cause <- Area_x_cause_number %>%
bind_rows(Area_x_cause_rate) %>%
bind_rows(Area_x_cause_perc)
Area_x_cause <- Area_x_cause_number %>%
bind_rows(Area_x_cause_rate) %>%
bind_rows(Area_x_cause_perc) %>%
mutate(Deaths = replace_na(Deaths, 0)) %>%
mutate(Deaths = replace_na(Deaths, 0)) %>%
mutate(Deaths = replace_na(Deaths, 0)) %>%
Area_x_cause %>%
toJSON() %>%
write_lines('/Users/richtyler/Documents/Repositories/GBD/Deaths_cause_area_x.json')
names(Area_x_cause)
Area_x <- "West Sussex"
options(scipen = 999)
library(easypackages)
libraries(c("readxl", "readr", "plyr", "dplyr", "ggplot2", "png", "tidyverse", "reshape2", "scales", "viridis", "rgdal", "officer", "flextable", "tmaptools", "lemon", "fingertipsR", "PHEindicatormethods", "jsonlite"))
stack_theme = function(){
theme(
axis.text.y = element_text(colour = "#000000", size = 9),
axis.text.x = element_text(colour = "#000000", angle = 0, hjust = 1, vjust = .5, size = 8),
axis.title =  element_text(colour = "#000000", size = 9, face = "bold"),
plot.title = element_text(colour = "#000000", face = "bold", size = 10),
plot.subtitle = element_text(colour = "#000000", size = 9),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.background = element_rect(fill = "#FFFFFF"),
panel.grid.major.y = element_line(colour = "#E7E7E7", size = .3),
panel.grid.minor.y = element_blank(),
strip.text = element_text(colour = "#000000", size = 10, face = "bold"),
strip.background = element_blank(),
axis.ticks = element_line(colour = "#E7E7E7"),
legend.position = "bottom",
legend.title = element_text(colour = "#000000", size = 10, face = "bold"),
legend.background = element_rect(fill = "#ffffff"),
legend.key = element_rect(fill = "#ffffff", colour = "#ffffff"),
legend.text = element_text(colour = "#000000", size = 9),
axis.line = element_line(colour = "#dbdbdb")
)
}
slope_theme = function(){
theme(axis.text = element_blank(),
plot.title = element_text(colour = "#000000", face = "bold", size = 10),
plot.subtitle = element_text(colour = "#000000", size = 9),
strip.text = element_text(colour = "#000000", size = 10, face = "bold"),
plot.margin = unit(c(0,2,0,0), "cm"),
# legend.position = c(.75,-.1),
legend.position = "top",
legend.title = element_text(colour = "#000000", size = 10, face = "bold"),
legend.background = element_blank(),
legend.key = element_rect(fill = "#ffffff", colour = "#ffffff"),
legend.text = element_text(colour = "#000000", size = 8),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
strip.background = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank()
)}
if(!(file.exists("~/Documents/Repositories/GBD/Area_lookup_table.csv") & file.exists("~/Documents/Repositories/GBD/Area_types_table.csv"))){
LAD <- read_csv(url("https://opendata.arcgis.com/datasets/a267b55f601a4319a9955b0197e3cb81_0.csv"), col_types = cols(LAD17CD = col_character(),LAD17NM = col_character(),  LAD17NMW = col_character(),  FID = col_integer()))
Counties <- read_csv(url("https://opendata.arcgis.com/datasets/7e6bfb3858454ba79f5ab3c7b9162ee7_0.csv"), col_types = cols(CTY17CD = col_character(),  CTY17NM = col_character(),  Column2 = col_character(),  Column3 = col_character(),  FID = col_integer()))
lookup <- read_csv(url("https://opendata.arcgis.com/datasets/41828627a5ae4f65961b0e741258d210_0.csv"), col_types = cols(LTLA17CD = col_character(),  LTLA17NM = col_character(),  UTLA17CD = col_character(),  UTLA17NM = col_character(),  FID = col_integer()))
# This is a lower tier LA to upper tier LA lookup
UA <- subset(lookup, LTLA17NM == UTLA17NM)
CCG <- read_csv(url("https://opendata.arcgis.com/datasets/4010cd6fc6ce42c29581c4654618e294_0.csv"), col_types = cols(CCG18CD = col_character(),CCG18CDH = col_skip(),CCG18NM = col_character(), FID = col_skip())) %>%
rename(Area_Name = CCG18NM,
Area_Code = CCG18CD) %>%
mutate(Area_Type = "Clinical Commissioning Group (2018)")
Region <- read_csv(url("https://opendata.arcgis.com/datasets/cec20f3a9a644a0fb40fbf0c70c3be5c_0.csv"), col_types = cols(RGN17CD = col_character(),  RGN17NM = col_character(),  RGN17NMW = col_character(),  FID = col_integer()))
colnames(Region) <- c("Area_Code", "Area_Name", "Area_Name_Welsh", "FID")
Region$Area_Type <- "Region"
Region <- Region[c("Area_Code", "Area_Name", "Area_Type")]
LAD <- subset(LAD, substr(LAD$LAD17CD, 1, 1) == "E")
LAD$Area_Type <- ifelse(LAD$LAD17NM %in% UA$LTLA17NM, "Unitary Authority", "District")
colnames(LAD) <- c("Area_Code", "Area_Name", "Area_Name_Welsh", "FID", "Area_Type")
LAD <- LAD[c("Area_Code", "Area_Name", "Area_Type")]
Counties$Area_type <- "County"
colnames(Counties) <- c("Area_Code", "Area_Name", "Col2", "Col3", "FID", "Area_Type")
Counties <- Counties[c("Area_Code", "Area_Name", "Area_Type")]
England <- data.frame(Area_Code = "E92000001", Area_Name = "England", Area_Type = "Country")
Areas <- rbind(LAD, CCG, Counties, Region, England)
rm(LAD, CCG, Counties, Region, England, UA)
write.csv(lookup, "~/Documents/Repositories/GBD/Area_lookup_table.csv", row.names = FALSE)
write.csv(Areas, "~/Documents/Repositories/GBD/Area_types_table.csv", row.names = FALSE)
}
Lookup <- read_csv("~/Documents/Repositories/GBD/Area_lookup_table.csv", col_types = cols(LTLA17CD = col_character(),LTLA17NM = col_character(), UTLA17CD = col_character(),  UTLA17NM = col_character(), FID = col_character()))
Areas <- read_csv("~/Documents/Repositories/GBD/Area_types_table.csv", col_types = cols(Area_Code = col_character(), Area_Name = col_character(), Area_Type = col_character()))
WSx_NN <- data.frame(Area_Code = nearest_neighbours(AreaCode = "E10000032", AreaTypeID = "102", measure = "CIPFA")) %>%   mutate(Neighbour_rank = row_number()) %>%
left_join(Areas, by = "Area_Code") %>%
bind_rows(data.frame(Area_Code = "E10000032", Neighbour_rank = 0, Area_Name = "West Sussex", Area_Type = "County"))
GBD_2017_cause_hierarchy <- read_excel("~/Documents/GBD_data_download/IHME_GBD_2017_CAUSE_HIERARCHY_Y2018M11D18.xlsx", col_types = c("text", "text", "text", "text", "text", "numeric", "text", "text")) %>%
rename(Cause_name = cause_name,
Cause_id = cause_id,
Parent_id = parent_id,
Cause_outline = cause_outline,
Level = level)
GBD_2017_rei_hierarchy <- read_excel("~/Documents/GBD_data_download/IHME_GBD_2017_REI_HIERARCHY_Y2018M11D18.xlsx", col_types = c("text", "text", "text", "text", "text", "numeric"))
All_ages_GBD_cause_data <- unique(list.files("~/Documents/GBD_data_download/")[grepl("e004c73d", list.files("~/Documents/GBD_data_download/")) == TRUE]) %>%
map_df(~read_csv(paste0("~/Documents/GBD_data_download/",.), col_types = cols(age = col_character(), cause = col_character(), location = col_character(), lower = col_double(), measure = col_character(), metric = col_character(), sex = col_character(), upper = col_double(), val = col_double(), year = col_number()))) %>%
filter(age != 'Age-standardized') %>%
rename(Area = location,
Lower_estimate = lower,
Upper_estimate = upper,
Estimate = val,
Year = year,
Sex = sex,
Age = age,
Cause = cause) %>%
mutate(metric = ifelse(metric == "Rate", "Rate per 100,000 population", ifelse(metric == "Percent", "Proportion of total burden caused by this condition", metric))) %>%
left_join(GBD_2017_cause_hierarchy[c("Cause_name", "Cause_outline", "Cause_id", "Parent_id", "Level")], by = c("Cause" = "Cause_name")) %>%
left_join(GBD_2017_cause_hierarchy[c("Cause_name", "Cause_id")], by = c("Parent_id" = "Cause_id")) %>%
rename(Parent_cause = Cause_name) %>%
mutate(Cause = ifelse(nchar(Cause) < 40, Cause, sub('(.{1,40})(\\s|$)', '\\1\n', Cause))) %>%
mutate(Cause = factor(Cause, levels =  unique(Cause))) %>%
select(Area, Sex, Year, Cause, Cause_outline, Cause_id, Level, Estimate, Lower_estimate, Upper_estimate, Parent_cause, Parent_id, measure, metric)
Cause_number <- All_ages_GBD_cause_data %>%
filter(metric == "Number") %>%
group_by(measure, Year, Area, Sex) %>%
select(-c(Lower_estimate, Upper_estimate)) %>%
spread(measure, Estimate) %>%
ungroup()
Cause_rate <- All_ages_GBD_cause_data %>%
filter(metric == "Rate per 100,000 population") %>%
group_by(measure, Year, Area, Sex) %>%
select(-c(Lower_estimate, Upper_estimate)) %>%
spread(measure, Estimate) %>%
ungroup()
# Proportions of morbidity, mortality and dalys due to particular causes ####
Cause_perc <- All_ages_GBD_cause_data %>%
filter(metric == "Proportion of total burden caused by this condition") %>%
group_by(measure, Year, Area, Sex) %>%
select(-c(Lower_estimate, Upper_estimate)) %>%
spread(measure, Estimate) %>%
ungroup()
Area_x_cause_number <- Cause_number %>%
filter(Area == Area_x) %>%
arrange(Sex, Year, Cause_outline)
Area_x_cause_rate <- Cause_rate %>%
filter(Area == Area_x) %>%
arrange(Sex, Year, Cause_outline)
Area_x_cause_perc <- Cause_perc %>%
filter(Area == Area_x) %>%
arrange(Sex, Year, Cause_outline)
Area_x_cause <- Area_x_cause_number %>%
bind_rows(Area_x_cause_rate) %>%
bind_rows(Area_x_cause_perc) %>%
mutate(Deaths = replace_na(Deaths, 0)) %>%
mutate(Incidence = replace_na(Incidence, 0)) %>%
mutate(Prevalence = replace_na(Prevalence, 0)) %>%
mutate(`YLDs (Years Lived with Disability)` = replace_na(`YLDs (Years Lived with Disability)`, 0)) %>%
mutate(`YLLs (Years of Life Lost)` = replace_na(`YLLs (Years of Life Lost)`, 0))
View(Area_x_cause)
Area_x_cause %>%
toJSON() %>%
write_lines('/Users/richtyler/Documents/Repositories/GBD/Deaths_cause_area_x.json')
write.csv(Area_x_cause, '/Users/richtyler/Documents/Repositories/GBD/Deaths_cause_area_x.csv')
# SFWS_Action_plan
library(tidyverse)
library(readxl)
setwd("/Users/richtyler/Documents/Repositories/SFWS")
capwords = function(s, strict = FALSE) {
cap = function(s) paste(toupper(substring(s, 1, 1)),
{s = substring(s, 2); if(strict) tolower(s) else s},sep = "", collapse = " " )
sapply(strsplit(s, split = " "), cap, USE.NAMES = !is.null(names(s)))}
AP_raw <- read_excel("./SFWS Action Plan.xlsx")  %>%
mutate(timeframe_short = ifelse(grepl("S", timeframe, ignore.case = TRUE) == TRUE, "shortterm", NA),
timeframe_medium = ifelse(grepl("M", timeframe, ignore.case = TRUE) == TRUE, "mediumterm", NA),
timeframe_long = ifelse(grepl("L", timeframe, ignore.case = TRUE) == TRUE, "longterm", NA)) %>%
mutate(ongoing = ifelse(grepl("S", timeframe, ignore.case = TRUE) == TRUE & grepl("M", timeframe, ignore.case = TRUE) == TRUE & grepl("L", timeframe, ignore.case = TRUE) == TRUE, "ongoing", NA))  %>%
mutate(timeframe_js = trimws(gsub("NA", "", paste(timeframe_short, timeframe_medium, timeframe_long, ongoing, sep = " ")), which = "left")) %>%
mutate(level_individual = ifelse(grepl("I", level, ignore.case = TRUE) == TRUE, "individual", NA),
level_community = ifelse(grepl("C", level, ignore.case = TRUE) == TRUE, "community", NA),
level_place = ifelse(grepl("P", level, ignore.case = TRUE) == TRUE, "place", NA)) %>%
mutate(level_js = trimws(gsub("NA", "", paste(level_individual, level_community, level_place, sep = " ")), which = "left")) %>%
mutate(progress = ifelse(is.na(progress), 'Progress unknown', progress)) %>%
mutate(achieved = ifelse(is.na(achieved), 'Progress unknown', achieved))
write.csv(AP_raw, "./actionplan_raw.csv", row.names = FALSE, na = "")
AP_raw <- AP_raw %>%
mutate(how_many_tf = rowSums(!is.na(AP_raw[c("timeframe_short", "timeframe_medium", "timeframe_long", "ongoing")]))) %>%
mutate(timeframe_label = ifelse(how_many_tf == 4, "Ongoing",
ifelse(how_many_tf == 2, trimws(gsub("NA and", "", paste(timeframe_short, timeframe_medium, timeframe_long, sep = " and ")), which = "left"),
ifelse(how_many_tf == 1, timeframe_js, NA)))) %>%
mutate(timeframe_label = gsub("NA ", "", timeframe_label)) %>%
mutate(timeframe_label = gsub("and NA", "", timeframe_label)) %>%
mutate(timeframe_label = gsub("shortterm", "Short term", timeframe_label)) %>%
mutate(timeframe_label = gsub("mediumterm", "Medium term", timeframe_label)) %>%
mutate(timeframe_label = gsub("longterm", "Long term", timeframe_label)) %>%
mutate(how_many_levels = rowSums(!is.na(AP_raw[c("level_individual", "level_community", "level_place")]))) %>%
mutate(levels_label = ifelse(how_many_levels == 3, "All levels",
ifelse(how_many_levels == 2, trimws(gsub("NA and", "", paste(capwords(level_individual, strict = TRUE), capwords(level_community, strict = TRUE), capwords(level_place, strict = TRUE), sep = " and ")), which = "left"),
ifelse(how_many_levels == 1, capwords(level_js, strict = TRUE), NA)))) %>%
mutate(levels_label = gsub("NA ", "", levels_label)) %>%
mutate(partner_label = ifelse(grepl(",", partners, ignore.case = TRUE) == TRUE, "Multiple partners", partners)) %>%
mutate(partner_label = gsub("Western Sussex Hospitals NHS Foundation Trust", '<abbr title="Western Sussex Hospital NHS Foundation Trust">WSHFT</abbr>', partner_label)) %>%
mutate(partner_js = partners) %>%
mutate(partner_js = gsub("Trading Standards", "trading_standards", partner_js)) %>%
mutate(partner_js = gsub("Local Maternity System", "lms", partner_js)) %>%
mutate(partner_js = gsub("Wellbeing programme", "wellbeing_programme", partner_js, ignore.case = TRUE)) %>%
mutate(partner_js = gsub("Fire Service", "fire_service", partner_js)) %>%
mutate(partner_js = gsub("Public Health", "public_health", partner_js)) %>%
mutate(partner_js = gsub("Maternity at Western Hospitals", "maternity wsht", partner_js)) %>%
mutate(partner_js = gsub("Health4Families", "h4f", partner_js)) %>%
mutate(partner_js = gsub("Prisons", "prisons", partner_js)) %>%
mutate(partner_js = gsub("Communities", "communities", partner_js)) %>%
mutate(partner_js = gsub("Western Sussex Hospitals NHS Foundation Trust", "wsht", partner_js)) %>%
mutate(partner_js = gsub("Sussex Community NHS Foundation Trust", "scft", partner_js)) %>%
mutate(partner_js = gsub("Primary Care", "primary_care", partner_js)) %>%
mutate(partner_js = gsub("District & Boroughs", "dandb", partner_js)) %>%
mutate(partner_js = gsub(",", "", partner_js)) %>%
mutate(achieved_js = ifelse(achieved == 'Progress unknown', 'Unknown', achieved))
AP_ready <- AP_raw %>%
select(ap_number, ap_title, ap_text, success, progress, achieved, partners,partner_label, partner_js, hic_number, hic_label, hic_class, timeframe_js, timeframe_label, level_js, levels_label, achieved_js) %>%
mutate(div_1 = gsub("NA", "", paste('<div class = "grid-item', hic_class, timeframe_js, level_js, partner_js,'">', sep = " "))) %>%
mutate(div_2 = gsub("NA", "", paste0('<p class = "ap_number">',ap_number,'</p>'))) %>%
mutate(div_3 = gsub("NA", "", paste0('<p class = "ap_title">', ap_title,'</p>'))) %>%
mutate(div_4 = gsub("NA", "", paste0('<p class = "ap_text">', ap_text,'</p>'))) %>%
mutate(div_5 = gsub("NA", "", paste0('<p class = "success">', success,'</p>'))) %>%
mutate(div_6 = gsub("NA", "", paste0('<p class = "partner_label">', partner_label,'</p>'))) %>%
mutate(div_7 = gsub("NA", "", paste0('<p class = "hic_number">', hic_number,'</p>'))) %>%
mutate(div_8 = gsub("NA", "", paste0('<p class = "hic_label">', hic_label,'</p>'))) %>%
mutate(div_9 = gsub("NA", "", paste0('<p class = "timeframe_label">', timeframe_label,'</p>'))) %>%
mutate(div_10 = gsub("NA", "", paste0('<p class = "levels_label">', levels_label,'</p>'))) %>%
mutate(div_11 = paste0('<div class="tooltip_',hic_class,'">'),
div_12 = paste0("<h2>",ap_title, "</h2>"),
div_13 = paste0("<p>", ap_text, "</p>"),
div_14 = paste0("<h3>What will success look like?</h3>"),
div_15 = paste0("<p>", success, "</p>"),
div_16 = paste0("<h3>Who are key partners for this action?</h3>"),
div_17 = paste0("<p>",partners,"</p>"),
div_18 = paste0("<h3>How are we doing so far?</h3>"),
div_19 = paste0('<p>', progress,'</p>'),
div_20 = paste0('<p class = "achieved_', achieved_js, '">', achieved,'</p>'),
div_21 = "</div>")
# Note we have removed the progress and achieved divs for the time being!! (div_9 and div_10)
AP_t <- gather(as.data.frame(t(AP_ready[c("div_1","div_2","div_3","div_4","div_5","div_6","div_7","div_8","div_9","div_10","div_11","div_12","div_13","div_14","div_15","div_16","div_17","div_18","div_19","div_20","div_21", "div_21")])))
write.csv(AP_t[c("value")], "./actionplan_html.csv", row.names = FALSE)
# SFWS_Action_plan
library(tidyverse)
library(readxl)
setwd("/Users/richtyler/Documents/Repositories/SFWS")
capwords = function(s, strict = FALSE) {
cap = function(s) paste(toupper(substring(s, 1, 1)),
{s = substring(s, 2); if(strict) tolower(s) else s},sep = "", collapse = " " )
sapply(strsplit(s, split = " "), cap, USE.NAMES = !is.null(names(s)))}
AP_raw <- read_excel("./SFWS Action Plan.xlsx")  %>%
mutate(timeframe_short = ifelse(grepl("S", timeframe, ignore.case = TRUE) == TRUE, "shortterm", NA),
timeframe_medium = ifelse(grepl("M", timeframe, ignore.case = TRUE) == TRUE, "mediumterm", NA),
timeframe_long = ifelse(grepl("L", timeframe, ignore.case = TRUE) == TRUE, "longterm", NA)) %>%
mutate(ongoing = ifelse(grepl("S", timeframe, ignore.case = TRUE) == TRUE & grepl("M", timeframe, ignore.case = TRUE) == TRUE & grepl("L", timeframe, ignore.case = TRUE) == TRUE, "ongoing", NA))  %>%
mutate(timeframe_js = trimws(gsub("NA", "", paste(timeframe_short, timeframe_medium, timeframe_long, ongoing, sep = " ")), which = "left")) %>%
mutate(level_individual = ifelse(grepl("I", level, ignore.case = TRUE) == TRUE, "individual", NA),
level_community = ifelse(grepl("C", level, ignore.case = TRUE) == TRUE, "community", NA),
level_place = ifelse(grepl("P", level, ignore.case = TRUE) == TRUE, "place", NA)) %>%
mutate(level_js = trimws(gsub("NA", "", paste(level_individual, level_community, level_place, sep = " ")), which = "left")) %>%
mutate(progress = ifelse(is.na(progress), 'Progress unknown', progress)) %>%
mutate(achieved = ifelse(is.na(achieved), 'Progress unknown', achieved))
write.csv(AP_raw, "./actionplan_raw.csv", row.names = FALSE, na = "")
# We have to split the code here because the next part calls AP_raw which is not created until the end of the command
AP_raw <- AP_raw %>%
mutate(how_many_tf = rowSums(!is.na(AP_raw[c("timeframe_short", "timeframe_medium", "timeframe_long", "ongoing")]))) %>%
mutate(timeframe_label = ifelse(how_many_tf == 4, "Ongoing",
ifelse(how_many_tf == 2, trimws(gsub("NA and", "", paste(timeframe_short, timeframe_medium, timeframe_long, sep = " and ")), which = "left"),
ifelse(how_many_tf == 1, timeframe_js, NA)))) %>%
mutate(timeframe_label = gsub("NA ", "", timeframe_label)) %>%
mutate(timeframe_label = gsub("and NA", "", timeframe_label)) %>%
mutate(timeframe_label = gsub("shortterm", "Short term", timeframe_label)) %>%
mutate(timeframe_label = gsub("mediumterm", "Medium term", timeframe_label)) %>%
mutate(timeframe_label = gsub("longterm", "Long term", timeframe_label)) %>%
mutate(how_many_levels = rowSums(!is.na(AP_raw[c("level_individual", "level_community", "level_place")]))) %>%
mutate(levels_label = ifelse(how_many_levels == 3, "All levels",
ifelse(how_many_levels == 2, trimws(gsub("NA and", "", paste(capwords(level_individual, strict = TRUE), capwords(level_community, strict = TRUE), capwords(level_place, strict = TRUE), sep = " and ")), which = "left"),
ifelse(how_many_levels == 1, capwords(level_js, strict = TRUE), NA)))) %>%
mutate(levels_label = gsub("NA ", "", levels_label)) %>%
mutate(partner_label = ifelse(grepl(",", partners, ignore.case = TRUE) == TRUE, "Multiple partners", partners)) %>%
mutate(partner_label = gsub("Western Sussex Hospitals NHS Foundation Trust", '<abbr title="Western Sussex Hospital NHS Foundation Trust">WSHFT</abbr>', partner_label)) %>%
mutate(partner_js = partners) %>%
mutate(partner_js = gsub("Trading Standards", "trading_standards", partner_js)) %>%
mutate(partner_js = gsub("Local Maternity System", "lms", partner_js)) %>%
mutate(partner_js = gsub("Wellbeing programme", "wellbeing_programme", partner_js, ignore.case = TRUE)) %>%
mutate(partner_js = gsub("Fire Service", "fire_service", partner_js)) %>%
mutate(partner_js = gsub("Public Health", "public_health", partner_js)) %>%
mutate(partner_js = gsub("Maternity at Western Hospitals", "maternity wsht", partner_js)) %>%
mutate(partner_js = gsub("Health4Families", "h4f", partner_js)) %>%
mutate(partner_js = gsub("Prisons", "prisons", partner_js)) %>%
mutate(partner_js = gsub("Communities", "communities", partner_js)) %>%
mutate(partner_js = gsub("Western Sussex Hospitals NHS Foundation Trust", "wsht", partner_js)) %>%
mutate(partner_js = gsub("Sussex Community NHS Foundation Trust", "scft", partner_js)) %>%
mutate(partner_js = gsub("Primary Care", "primary_care", partner_js)) %>%
mutate(partner_js = gsub("District & Boroughs", "dandb", partner_js)) %>%
mutate(partner_js = gsub(",", "", partner_js)) %>%
mutate(achieved_js = ifelse(achieved == 'Progress unknown', 'Unknown', achieved))
AP_ready <- AP_raw %>%
select(ap_number, ap_title, ap_text, success, progress, achieved, partners,partner_label, partner_js, hic_number, hic_label, hic_class, timeframe_js, timeframe_label, level_js, levels_label, achieved_js) %>%
mutate(div_1 = gsub("NA", "", paste('<div class = "grid-item', hic_class, timeframe_js, level_js, partner_js,'">', sep = " "))) %>%
mutate(div_2 = gsub("NA", "", paste0('<p class = "ap_number">',ap_number,'</p>'))) %>%
mutate(div_3 = gsub("NA", "", paste0('<p class = "ap_title">', ap_title,'</p>'))) %>%
mutate(div_4 = gsub("NA", "", paste0('<p class = "ap_text">', ap_text,'</p>'))) %>%
mutate(div_5 = gsub("NA", "", paste0('<p class = "success">', success,'</p>'))) %>%
mutate(div_6 = gsub("NA", "", paste0('<p class = "partner_label">', partner_label,'</p>'))) %>%
mutate(div_7 = gsub("NA", "", paste0('<p class = "hic_number">', hic_number,'</p>'))) %>%
mutate(div_8 = gsub("NA", "", paste0('<p class = "hic_label">', hic_label,'</p>'))) %>%
mutate(div_9 = gsub("NA", "", paste0('<p class = "timeframe_label">', timeframe_label,'</p>'))) %>%
mutate(div_10 = gsub("NA", "", paste0('<p class = "levels_label">', levels_label,'</p>'))) %>%
mutate(div_11 = paste0('<div class="tooltip_',hic_class,'">'),
div_12 = paste0("<h2>",ap_title, "</h2>"),
div_13 = paste0("<p>", ap_text, "</p>"),
div_14 = paste0("<h3>What will success look like?</h3>"),
div_15 = paste0("<p>", success, "</p>"),
div_16 = paste0("<h3>Who are key partners for this action?</h3>"),
div_17 = paste0("<p>",partners,"</p>"),
div_18 = paste0("<h3>How are we doing so far?</h3>"),
div_19 = paste0('<p>', progress,'</p>'),
div_20 = paste0('<p class = "achieved_', achieved_js, '">', achieved,'</p>'),
div_21 = "</div>")
# We could include links or an update of progress etc.
# Note we have removed the progress and achieved divs for the time being!! (div_9 and div_10)
AP_t <- gather(as.data.frame(t(AP_ready[c("div_1","div_2","div_3","div_4","div_5","div_6","div_7","div_8","div_9","div_10","div_11","div_12","div_13","div_14","div_15","div_16","div_17","div_18","div_19","div_20","div_21", "div_21")])))
write.csv(AP_t[c("value")], "./actionplan_html.csv", row.names = FALSE)
