sample(x = (c(sample(x = 10:60, nrow(dummy_SSS)*.75, replace = TRUE), sample(60:100, nrow(dummy_SSS)*.25, replace = TRUE))), nrow(dummy_SSS), replace = TRUE)
dummy_SSS <- dummy_SSS_a %>%
bind_rows(dummy_SSS_b) %>%
mutate(`Date of second appointment` = `Date of first appointment` + sample(x = c(3:12), nrow(.), replace = TRUE)) %>% # second appointments somewhen between 3 and 12 days after 1st appt.
mutate(`Agreed quit date` = `Date of second appointment` + sample(x = c(0:7), nrow(.), replace = TRUE)) %>% # This will be either the same day or up to 7 days after second appointment
mutate(`Date of follow up appointment (25-42 days after quit date)` = `Agreed quit date` + sample(x = c(20:55), nrow(.), replace = TRUE)) %>% # Follow up date somewhen between 20 and 55, so that we can see some interventions falling outside of Russel standard 25-42 days
mutate(Days_AQD_to_follow_up = as.numeric(difftime(`Date of follow up appointment (25-42 days after quit date)`, `Agreed quit date`, units = c("days")))) %>% # count number of days between agreed quit date and follow up
mutate(Followup_within_target = factor(ifelse(is.na(Days_AQD_to_follow_up), "No data on follow up", ifelse(Days_AQD_to_follow_up < 25, "Less than 25 days after agreed quit date", ifelse(Days_AQD_to_follow_up >= 25 & Days_AQD_to_follow_up <= 42, "Within 25 and 42 days", ifelse(Days_AQD_to_follow_up > 42, "More than 42 days after agreed quit date", NA)))), levels = c("Less than 25 days after agreed quit date","Within 25 and 42 days","More than 42 days after agreed quit date","No data on follow up"))) %>% # categorise follow up within target days (25-42)
mutate(Outcome = sample(c('Lost to follow up', 'Not quit', 'Quit (self reported)', 'Quit (CO verified)'), nrow(.), replace=TRUE, prob=c(0.25, 0.15, 0.15, 0.45))) %>% # create some outcomes, which are weighted towards quits, although with 25% lost to follow up
mutate(`Date of form entry` = `Date of follow up appointment (25-42 days after quit date)` + sample(x = c(sample(x = 10:60, nrow(.)*.75, replace = TRUE), sample(60:100, nrow(.)*.25, replace = TRUE)), nrow(.), replace = TRUE)) %>% # Create a form entry date 10-100 days from follow up, but where values 10:60 appear 75% of the time
mutate(Days_follow_up_to_form_entry = as.numeric(difftime(`Date of form entry`,`Date of follow up appointment (25-42 days after quit date)`, units = c("days")))) %>% # count days follow up to upload
mutate(First_appt_quarter = quarter(`Date of first appointment`, with_year = TRUE, fiscal_start = 4)) %>% # Assign quarter for first appointment
mutate(First_appt_quarter = factor(ifelse(is.na(First_appt_quarter), NA, paste0(ifelse(substr(First_appt_quarter, 6,7) == 1, "Q1 April-June", ifelse(substr(First_appt_quarter, 6,7) == 2, "Q2 July-September", ifelse(substr(First_appt_quarter, 6,7) == 3, "Q3 October-December", ifelse(substr(First_appt_quarter, 6,7) == 4, "Q4 January-March", NA)))), " ", substr(First_appt_quarter, 1,4))), levels = c("Q1 April-June 2017", "Q2 July-September 2017", "Q3 October-December 2017", "Q4 January-March 2018", "Q1 April-June 2018", "Q2 July-September 2018", "Q3 October-December 2018", "Q4 January-March 2019", "Q1 April-June 2019", "Q2 July-September 2019", "Q3 October-December 2019", "Q4 January-March 2020"))) %>%
mutate(NHS_digital_quarter = quarter(`Date of second appointment`, with_year = TRUE, fiscal_start = 4)) %>%   mutate(NHS_digital_quarter = factor(ifelse(is.na(NHS_digital_quarter), NA, paste0(ifelse(substr(NHS_digital_quarter, 6,7) == 1, "Q1 April-June", ifelse(substr(NHS_digital_quarter, 6,7) == 2, "Q2 July-September", ifelse(substr(NHS_digital_quarter, 6,7) == 3, "Q3 October-December", ifelse(substr(NHS_digital_quarter, 6,7) == 4, "Q4 January-March", NA)))), " ", substr(NHS_digital_quarter, 1,4))), levels = c("Q1 April-June 2017", "Q2 July-September 2017", "Q3 October-December 2017", "Q4 January-March 2018", "Q1 April-June 2018", "Q2 July-September 2018", "Q3 October-December 2018", "Q4 January-March 2019", "Q1 April-June 2019", "Q2 July-September 2019", "Q3 October-December 2019", "Q4 January-March 2020"))) %>%
mutate(Invoice_quarter = ifelse(`Date of form entry` < '2019-05-22', 'Q4 January-March 2019', ifelse(`Date of form entry` >= '2019-05-22' & `Date of form entry` < '2019-08-29' & `Date of first appointment` < '2019-07-01', 'Q1 April-June 2019', ifelse(`Date of form entry` > '2019-08-29' & `Date of form entry` < '2019-11-19', 'Q2 July-September 2019', ifelse(`Date of form entry` < '2019-08-29' & `Date of first appointment` > '2019-07-01', 'Q2 July-September 2019', ifelse(`Date of form entry` > '2019-11-20' & `Date of form entry` < '2020-02-21', 'Q3 October-December 2019', ifelse(`Date of form entry` > '2020-02-22' & `Date of form entry` < '2020-05-13', 'Q4 January-March 2020', 'Not sure yet'))))))) %>%
mutate(Invoice_quarter = ifelse(Invoice_quarter == 'Q4 January-March 2019' & `Date of first appointment` >= '2019-04-01', 'Q1 April-June 2019', Invoice_quarter)) %>%
mutate(Age_included = sample(x = c('Yes', 'No'), nrow(.), replace = TRUE, prob = c(0.99, 0.01))) %>% # make a small proportion (around 1%) where age is not included (and so they cannot be counted in the NHS digital return)
mutate(Sex_included = sample(x = c('Yes', 'No'), nrow(.), replace = TRUE, prob = c(0.99, 0.01))) %>%
mutate(Eligible_to_submit_to_NHS_digital = ifelse(NHS_digital_quarter %in% c('Q1 April-June 2019', 'Q2 July-September 2019','Q3 October-December 2019', 'Q4 January-March 2020') & `Date of form entry` <= '2020-06-05', 'Yes', 'Activity not submitted in time for NHS Digital return'))
rm(dummy_SSS_a, dummy_SSS_b)
names(dummy_SSS)
dummy_SSS <- dummy_SSS_a %>%
bind_rows(dummy_SSS_b) %>%
mutate(`Date of second appointment` = `Date of first appointment` + sample(x = c(3:12), nrow(.), replace = TRUE)) %>% # second appointments somewhen between 3 and 12 days after 1st appt.
mutate(`Agreed quit date` = `Date of second appointment` + sample(x = c(0:7), nrow(.), replace = TRUE)) %>% # This will be either the same day or up to 7 days after second appointment
mutate(`Date of follow up appointment (25-42 days after quit date)` = `Agreed quit date` + sample(x = c(20:55), nrow(.), replace = TRUE)) %>% # Follow up date somewhen between 20 and 55, so that we can see some interventions falling outside of Russel standard 25-42 days
mutate(Days_AQD_to_follow_up = as.numeric(difftime(`Date of follow up appointment (25-42 days after quit date)`, `Agreed quit date`, units = c("days")))) %>% # count number of days between agreed quit date and follow up
mutate(Followup_within_target = factor(ifelse(is.na(Days_AQD_to_follow_up), "No data on follow up", ifelse(Days_AQD_to_follow_up < 25, "Less than 25 days after agreed quit date", ifelse(Days_AQD_to_follow_up >= 25 & Days_AQD_to_follow_up <= 42, "Within 25 and 42 days", ifelse(Days_AQD_to_follow_up > 42, "More than 42 days after agreed quit date", NA)))), levels = c("Less than 25 days after agreed quit date","Within 25 and 42 days","More than 42 days after agreed quit date","No data on follow up"))) %>% # categorise follow up within target days (25-42)
mutate(Outcome = sample(c('Lost to follow up', 'Not quit', 'Quit (self reported)', 'Quit (CO verified)'), nrow(.), replace=TRUE, prob=c(0.25, 0.15, 0.15, 0.45))) %>% # create some outcomes, which are weighted towards quits, although with 25% lost to follow up
mutate(`Date of form entry` = `Date of follow up appointment (25-42 days after quit date)` + sample(x = c(sample(x = 10:60, nrow(.)*.75, replace = TRUE), sample(60:100, nrow(.)*.25, replace = TRUE)), nrow(.), replace = TRUE)) %>% # Create a form entry date 10-100 days from follow up, but where values 10:60 appear 75% of the time
mutate(Days_follow_up_to_form_entry = as.numeric(difftime(`Date of form entry`,`Date of follow up appointment (25-42 days after quit date)`, units = c("days")))) %>% # count days follow up to upload
mutate(First_appt_quarter = quarter(`Date of first appointment`, with_year = TRUE, fiscal_start = 4)) %>% # Assign quarter for first appointment
mutate(First_appt_quarter = factor(ifelse(is.na(First_appt_quarter), NA, paste0(ifelse(substr(First_appt_quarter, 6,7) == 1, "Q1 April-June", ifelse(substr(First_appt_quarter, 6,7) == 2, "Q2 July-September", ifelse(substr(First_appt_quarter, 6,7) == 3, "Q3 October-December", ifelse(substr(First_appt_quarter, 6,7) == 4, "Q4 January-March", NA)))), " ", substr(First_appt_quarter, 1,4))), levels = c("Q1 April-June 2017", "Q2 July-September 2017", "Q3 October-December 2017", "Q4 January-March 2018", "Q1 April-June 2018", "Q2 July-September 2018", "Q3 October-December 2018", "Q4 January-March 2019", "Q1 April-June 2019", "Q2 July-September 2019", "Q3 October-December 2019", "Q4 January-March 2020"))) %>%
mutate(NHS_digital_quarter = quarter(`Date of second appointment`, with_year = TRUE, fiscal_start = 4)) %>%   mutate(NHS_digital_quarter = factor(ifelse(is.na(NHS_digital_quarter), NA, paste0(ifelse(substr(NHS_digital_quarter, 6,7) == 1, "Q1 April-June", ifelse(substr(NHS_digital_quarter, 6,7) == 2, "Q2 July-September", ifelse(substr(NHS_digital_quarter, 6,7) == 3, "Q3 October-December", ifelse(substr(NHS_digital_quarter, 6,7) == 4, "Q4 January-March", NA)))), " ", substr(NHS_digital_quarter, 1,4))), levels = c("Q1 April-June 2017", "Q2 July-September 2017", "Q3 October-December 2017", "Q4 January-March 2018", "Q1 April-June 2018", "Q2 July-September 2018", "Q3 October-December 2018", "Q4 January-March 2019", "Q1 April-June 2019", "Q2 July-September 2019", "Q3 October-December 2019", "Q4 January-March 2020"))) %>%
mutate(Invoice_quarter = ifelse(`Date of form entry` < '2019-05-22', 'Q4 January-March 2019', ifelse(`Date of form entry` >= '2019-05-22' & `Date of form entry` < '2019-08-29' & `Date of first appointment` < '2019-07-01', 'Q1 April-June 2019', ifelse(`Date of form entry` > '2019-08-29' & `Date of form entry` < '2019-11-19', 'Q2 July-September 2019', ifelse(`Date of form entry` < '2019-08-29' & `Date of first appointment` > '2019-07-01', 'Q2 July-September 2019', ifelse(`Date of form entry` > '2019-11-20' & `Date of form entry` < '2020-02-21', 'Q3 October-December 2019', ifelse(`Date of form entry` > '2020-02-22' & `Date of form entry` < '2020-05-13', 'Q4 January-March 2020', 'Not sure yet'))))))) %>%
mutate(Invoice_quarter = ifelse(Invoice_quarter == 'Q4 January-March 2019' & `Date of first appointment` >= '2019-04-01', 'Q1 April-June 2019', Invoice_quarter)) %>%
mutate(Age_included = sample(x = c('Yes', 'No'), nrow(.), replace = TRUE, prob = c(0.99, 0.01))) %>% # make a small proportion (around 1%) where age is not included (and so they cannot be counted in the NHS digital return)
mutate(Sex_included = sample(x = c('Yes', 'No'), nrow(.), replace = TRUE, prob = c(0.99, 0.01))) %>%
mutate(Eligible_to_submit_to_NHS_digital = ifelse(NHS_digital_quarter %in% c('Q1 April-June 2019', 'Q2 July-September 2019','Q3 October-December 2019', 'Q4 January-March 2020') & `Date of form entry` <= '2020-06-05', 'Yes', 'Activity not submitted in time for NHS Digital return')) %>%
toJSON() %>%
write_lines(paste0('/Users/richtyler/Documents/Repositories/gp_sss_timeline_analysis/dummy_data_gp_sss.json'))
library(easypackages)
libraries(c("readxl", "readr", "plyr", "dplyr", "ggplot2", "png", "tidyverse", "reshape2", "scales", "jsonlite", 'lubridate'))
# We start by creating some dummy datasets of random start dates. We'll create 367 2018/19 interventions and 1393 interventions in 2019/20
dummy_SSS_a <- data.frame(id = as.character(1:367)) %>%
mutate(`Date of first appointment` = sample(seq(as.Date('2018-04-01', format = "%Y-%m-%d"), as.Date('2019-03-31', format="%Y-%m-%d"), by="day"), nrow(.), replace = TRUE))
dummy_SSS_b <- data.frame(id = as.character(368:1760)) %>%
mutate(`Date of first appointment` = sample(seq(as.Date('2019-04-01', format = "%Y-%m-%d"), as.Date('2020-03-31', format="%Y-%m-%d"), by="day"), nrow(.), replace = TRUE))
dummy_SSS <- dummy_SSS_a %>%
bind_rows(dummy_SSS_b) %>%
mutate(`Date of second appointment` = `Date of first appointment` + sample(x = c(3:12), nrow(.), replace = TRUE)) %>% # second appointments somewhen between 3 and 12 days after 1st appt.
mutate(`Agreed quit date` = `Date of second appointment` + sample(x = c(0:7), nrow(.), replace = TRUE)) %>% # This will be either the same day or up to 7 days after second appointment
mutate(`Date of follow up appointment (25-42 days after quit date)` = `Agreed quit date` + sample(x = c(20:55), nrow(.), replace = TRUE)) %>% # Follow up date somewhen between 20 and 55, so that we can see some interventions falling outside of Russel standard 25-42 days
mutate(Days_AQD_to_follow_up = as.numeric(difftime(`Date of follow up appointment (25-42 days after quit date)`, `Agreed quit date`, units = c("days")))) %>% # count number of days between agreed quit date and follow up
mutate(Followup_within_target = factor(ifelse(is.na(Days_AQD_to_follow_up), "No data on follow up", ifelse(Days_AQD_to_follow_up < 25, "Less than 25 days after agreed quit date", ifelse(Days_AQD_to_follow_up >= 25 & Days_AQD_to_follow_up <= 42, "Within 25 and 42 days", ifelse(Days_AQD_to_follow_up > 42, "More than 42 days after agreed quit date", NA)))), levels = c("Less than 25 days after agreed quit date","Within 25 and 42 days","More than 42 days after agreed quit date","No data on follow up"))) %>% # categorise follow up within target days (25-42)
mutate(Outcome = sample(c('Lost to follow up', 'Not quit', 'Quit (self reported)', 'Quit (CO verified)'), nrow(.), replace=TRUE, prob=c(0.25, 0.15, 0.15, 0.45))) %>% # create some outcomes, which are weighted towards quits, although with 25% lost to follow up
mutate(`Date of form entry` = `Date of follow up appointment (25-42 days after quit date)` + sample(x = c(sample(x = 10:60, nrow(.)*.75, replace = TRUE), sample(60:100, nrow(.)*.25, replace = TRUE)), nrow(.), replace = TRUE)) %>% # Create a form entry date 10-100 days from follow up, but where values 10:60 appear 75% of the time
mutate(Days_follow_up_to_form_entry = as.numeric(difftime(`Date of form entry`,`Date of follow up appointment (25-42 days after quit date)`, units = c("days")))) %>% # count days follow up to upload
mutate(First_appt_quarter = quarter(`Date of first appointment`, with_year = TRUE, fiscal_start = 4)) %>% # Assign quarter for first appointment
mutate(First_appt_quarter = factor(ifelse(is.na(First_appt_quarter), NA, paste0(ifelse(substr(First_appt_quarter, 6,7) == 1, "Q1 April-June", ifelse(substr(First_appt_quarter, 6,7) == 2, "Q2 July-September", ifelse(substr(First_appt_quarter, 6,7) == 3, "Q3 October-December", ifelse(substr(First_appt_quarter, 6,7) == 4, "Q4 January-March", NA)))), " ", substr(First_appt_quarter, 1,4))), levels = c("Q1 April-June 2017", "Q2 July-September 2017", "Q3 October-December 2017", "Q4 January-March 2018", "Q1 April-June 2018", "Q2 July-September 2018", "Q3 October-December 2018", "Q4 January-March 2019", "Q1 April-June 2019", "Q2 July-September 2019", "Q3 October-December 2019", "Q4 January-March 2020"))) %>%
mutate(NHS_digital_quarter = quarter(`Date of second appointment`, with_year = TRUE, fiscal_start = 4)) %>%   mutate(NHS_digital_quarter = factor(ifelse(is.na(NHS_digital_quarter), NA, paste0(ifelse(substr(NHS_digital_quarter, 6,7) == 1, "Q1 April-June", ifelse(substr(NHS_digital_quarter, 6,7) == 2, "Q2 July-September", ifelse(substr(NHS_digital_quarter, 6,7) == 3, "Q3 October-December", ifelse(substr(NHS_digital_quarter, 6,7) == 4, "Q4 January-March", NA)))), " ", substr(NHS_digital_quarter, 1,4))), levels = c("Q1 April-June 2017", "Q2 July-September 2017", "Q3 October-December 2017", "Q4 January-March 2018", "Q1 April-June 2018", "Q2 July-September 2018", "Q3 October-December 2018", "Q4 January-March 2019", "Q1 April-June 2019", "Q2 July-September 2019", "Q3 October-December 2019", "Q4 January-March 2020"))) %>%
mutate(Invoice_quarter = ifelse(`Date of form entry` < '2019-05-22', 'Q4 January-March 2019', ifelse(`Date of form entry` >= '2019-05-22' & `Date of form entry` < '2019-08-29' & `Date of first appointment` < '2019-07-01', 'Q1 April-June 2019', ifelse(`Date of form entry` > '2019-08-29' & `Date of form entry` < '2019-11-19', 'Q2 July-September 2019', ifelse(`Date of form entry` < '2019-08-29' & `Date of first appointment` > '2019-07-01', 'Q2 July-September 2019', ifelse(`Date of form entry` > '2019-11-20' & `Date of form entry` < '2020-02-21', 'Q3 October-December 2019', ifelse(`Date of form entry` > '2020-02-22' & `Date of form entry` < '2020-05-13', 'Q4 January-March 2020', 'Not sure yet'))))))) %>%
mutate(Invoice_quarter = ifelse(Invoice_quarter == 'Q4 January-March 2019' & `Date of first appointment` >= '2019-04-01', 'Q1 April-June 2019', Invoice_quarter)) %>%
mutate(Age_included = sample(x = c('Yes', 'No'), nrow(.), replace = TRUE, prob = c(0.99, 0.01))) %>% # make a small proportion (around 1%) where age is not included (and so they cannot be counted in the NHS digital return)
mutate(Sex_included = sample(x = c('Yes', 'No'), nrow(.), replace = TRUE, prob = c(0.99, 0.01))) %>%
mutate(Eligible_to_submit_to_NHS_digital = ifelse(NHS_digital_quarter %in% c('Q1 April-June 2019', 'Q2 July-September 2019','Q3 October-December 2019', 'Q4 January-March 2020') & `Date of form entry` <= '2020-06-05', 'Yes', 'Activity not submitted in time for NHS Digital return')) %>%
toJSON() %>%
write_lines(paste0('/Users/richtyler/Documents/Repositories/gp_sss_timeline_analysis/dummy_data_gp_sss.json'))
rm(dummy_SSS_a, dummy_SSS_b)
# SFWS_Action_plan
library(tidyverse)
library(readxl)
setwd("/Users/richtyler/Documents/Repositories/SFWS")
capwords = function(s, strict = FALSE) {
cap = function(s) paste(toupper(substring(s, 1, 1)),
{s = substring(s, 2); if(strict) tolower(s) else s},sep = "", collapse = " " )
sapply(strsplit(s, split = " "), cap, USE.NAMES = !is.null(names(s)))}
AP_raw <- read_excel("./SFWS Action Plan partnership update Jan 2020.xlsx") # %>%
View(AP_raw)
AP_raw <- read_excel("./SFWS Action Plan partnership update Jan 2020.xlsx") # %>%
AP_raw <- read_excel("./SFWS Action Plan partnership update Jan 2020.xlsx") %>%
mutate(timeframe_short = ifelse(grepl("S", timeframe, ignore.case = TRUE) == TRUE, "shortterm", NA),
timeframe_medium = ifelse(grepl("M", timeframe, ignore.case = TRUE) == TRUE, "mediumterm", NA),
timeframe_long = ifelse(grepl("L", timeframe, ignore.case = TRUE) == TRUE, "longterm", NA)) %>%
mutate(ongoing = ifelse(grepl("S", timeframe, ignore.case = TRUE) == TRUE & grepl("M", timeframe, ignore.case = TRUE) == TRUE & grepl("L", timeframe, ignore.case = TRUE) == TRUE, "ongoing", NA))  #%>%
View(AP_raw)
AP_raw <- read_excel("./SFWS Action Plan partnership update Jan 2020.xlsx") %>%
mutate(timeframe_short = ifelse(grepl("S", timeframe, ignore.case = TRUE) == TRUE, "shortterm", NA),
timeframe_medium = ifelse(grepl("M", timeframe, ignore.case = TRUE) == TRUE, "mediumterm", NA),
timeframe_long = ifelse(grepl("L", timeframe, ignore.case = TRUE) == TRUE, "longterm", NA)) %>%
mutate(ongoing = ifelse(grepl("S", timeframe, ignore.case = TRUE) == TRUE & grepl("M", timeframe, ignore.case = TRUE) == TRUE & grepl("L", timeframe, ignore.case = TRUE) == TRUE, "ongoing", NA))  %>%
mutate(timeframe_js = trimws(gsub("NA", "", paste(timeframe_short, timeframe_medium, timeframe_long, ongoing, sep = " ")), which = "left")) %>%
mutate(level_individual = ifelse(grepl("I", level, ignore.case = TRUE) == TRUE, "individual", NA),
level_community = ifelse(grepl("C", level, ignore.case = TRUE) == TRUE, "community", NA),
level_place = ifelse(grepl("P", level, ignore.case = TRUE) == TRUE, "place", NA)) %>%
mutate(level_js = trimws(gsub("NA", "", paste(level_individual, level_community, level_place, sep = " ")), which = "left")) %>%
mutate(progress = ifelse(is.na(progress), 'Progress unknown', progress)) %>%
mutate(achieved = ifelse(is.na(achieved), 'Progress unknown', achieved)) #%>%
View(AP_raw)
mutate(progess_updated = ifelse(is.na(`January update`), paste0(progress, '<h3>No update in January 2020</h3>'), ifelse(progress == 'Progress unknown', paste0('<h3>Janurary update: </h3><p>', `January update`,'</p>'),  paste0(progress, '<h3>Janurary update: </h3><p>', `January update`,'</p>'))))
AP_raw <- read_excel("./SFWS Action Plan partnership update Jan 2020.xlsx") %>%
mutate(timeframe_short = ifelse(grepl("S", timeframe, ignore.case = TRUE) == TRUE, "shortterm", NA),
timeframe_medium = ifelse(grepl("M", timeframe, ignore.case = TRUE) == TRUE, "mediumterm", NA),
timeframe_long = ifelse(grepl("L", timeframe, ignore.case = TRUE) == TRUE, "longterm", NA)) %>%
mutate(ongoing = ifelse(grepl("S", timeframe, ignore.case = TRUE) == TRUE & grepl("M", timeframe, ignore.case = TRUE) == TRUE & grepl("L", timeframe, ignore.case = TRUE) == TRUE, "ongoing", NA))  %>%
mutate(timeframe_js = trimws(gsub("NA", "", paste(timeframe_short, timeframe_medium, timeframe_long, ongoing, sep = " ")), which = "left")) %>%
mutate(level_individual = ifelse(grepl("I", level, ignore.case = TRUE) == TRUE, "individual", NA),
level_community = ifelse(grepl("C", level, ignore.case = TRUE) == TRUE, "community", NA),
level_place = ifelse(grepl("P", level, ignore.case = TRUE) == TRUE, "place", NA)) %>%
mutate(level_js = trimws(gsub("NA", "", paste(level_individual, level_community, level_place, sep = " ")), which = "left")) %>%
mutate(progress = ifelse(is.na(progress), 'Progress unknown', progress)) %>%
mutate(achieved = ifelse(is.na(achieved), 'Progress unknown', achieved)) %>%
mutate(progess_updated = ifelse(is.na(`January update`), paste0(progress, '<h3>No update in January 2020</h3>'), ifelse(progress == 'Progress unknown', paste0('<h3>January update: </h3><p>', `January update`,'</p>'),  paste0(progress, '<h3>Janurary update: </h3><p>', `January update`,'</p>'))))
View(AP_raw)
AP_raw <- read_excel("./SFWS Action Plan partnership update Jan 2020.xlsx") %>%
mutate(timeframe_short = ifelse(grepl("S", timeframe, ignore.case = TRUE) == TRUE, "shortterm", NA),
timeframe_medium = ifelse(grepl("M", timeframe, ignore.case = TRUE) == TRUE, "mediumterm", NA),
timeframe_long = ifelse(grepl("L", timeframe, ignore.case = TRUE) == TRUE, "longterm", NA)) %>%
mutate(ongoing = ifelse(grepl("S", timeframe, ignore.case = TRUE) == TRUE & grepl("M", timeframe, ignore.case = TRUE) == TRUE & grepl("L", timeframe, ignore.case = TRUE) == TRUE, "ongoing", NA))  %>%
mutate(timeframe_js = trimws(gsub("NA", "", paste(timeframe_short, timeframe_medium, timeframe_long, ongoing, sep = " ")), which = "left")) %>%
mutate(level_individual = ifelse(grepl("I", level, ignore.case = TRUE) == TRUE, "individual", NA),
level_community = ifelse(grepl("C", level, ignore.case = TRUE) == TRUE, "community", NA),
level_place = ifelse(grepl("P", level, ignore.case = TRUE) == TRUE, "place", NA)) %>%
mutate(level_js = trimws(gsub("NA", "", paste(level_individual, level_community, level_place, sep = " ")), which = "left")) %>%
mutate(progress = ifelse(is.na(progress), 'Progress unknown', progress)) %>%
mutate(achieved = ifelse(is.na(achieved), 'Progress unknown', achieved)) %>%
mutate(progess = ifelse(is.na(`January update`), paste0(progress, '<h3>No update in January 2020</h3>'), ifelse(progress == 'Progress unknown', paste0('<h3>January update: </h3><p>', `January update`,'</p>'),  paste0(progress, '<h3>Janurary update: </h3><p>', `January update`,'</p>'))))
View(AP_raw)
AP_raw <- read_excel("./SFWS Action Plan partnership update Jan 2020.xlsx") %>%
mutate(timeframe_short = ifelse(grepl("S", timeframe, ignore.case = TRUE) == TRUE, "shortterm", NA),
timeframe_medium = ifelse(grepl("M", timeframe, ignore.case = TRUE) == TRUE, "mediumterm", NA),
timeframe_long = ifelse(grepl("L", timeframe, ignore.case = TRUE) == TRUE, "longterm", NA)) %>%
mutate(ongoing = ifelse(grepl("S", timeframe, ignore.case = TRUE) == TRUE & grepl("M", timeframe, ignore.case = TRUE) == TRUE & grepl("L", timeframe, ignore.case = TRUE) == TRUE, "ongoing", NA))  %>%
mutate(timeframe_js = trimws(gsub("NA", "", paste(timeframe_short, timeframe_medium, timeframe_long, ongoing, sep = " ")), which = "left")) %>%
mutate(level_individual = ifelse(grepl("I", level, ignore.case = TRUE) == TRUE, "individual", NA),
level_community = ifelse(grepl("C", level, ignore.case = TRUE) == TRUE, "community", NA),
level_place = ifelse(grepl("P", level, ignore.case = TRUE) == TRUE, "place", NA)) %>%
mutate(level_js = trimws(gsub("NA", "", paste(level_individual, level_community, level_place, sep = " ")), which = "left")) %>%
mutate(progress = ifelse(is.na(progress), 'Progress unknown', progress)) %>%
mutate(achieved = ifelse(is.na(achieved), 'Progress unknown', achieved)) %>%
mutate(progress = ifelse(is.na(`January update`), paste0(progress, '<h3>No update in January 2020</h3>'), ifelse(progress == 'Progress unknown', paste0('<h3>January update: </h3><p>', `January update`,'</p>'),  paste0(progress, '<h3>Janurary update: </h3><p>', `January update`,'</p>'))))
write.csv(AP_raw, "./actionplan_raw.csv", row.names = FALSE, na = "")
AP_raw <- AP_raw %>%
mutate(how_many_tf = rowSums(!is.na(AP_raw[c("timeframe_short", "timeframe_medium", "timeframe_long", "ongoing")]))) %>%
mutate(timeframe_label = ifelse(how_many_tf == 4, "Ongoing",
ifelse(how_many_tf == 2, trimws(gsub("NA and", "", paste(timeframe_short, timeframe_medium, timeframe_long, sep = " and ")), which = "left"),
ifelse(how_many_tf == 1, timeframe_js, NA)))) %>%
mutate(timeframe_label = gsub("NA ", "", timeframe_label)) %>%
mutate(timeframe_label = gsub("and NA", "", timeframe_label)) %>%
mutate(timeframe_label = gsub("shortterm", "Short term", timeframe_label)) %>%
mutate(timeframe_label = gsub("mediumterm", "Medium term", timeframe_label)) %>%
mutate(timeframe_label = gsub("longterm", "Long term", timeframe_label)) %>%
mutate(how_many_levels = rowSums(!is.na(AP_raw[c("level_individual", "level_community", "level_place")]))) %>%
mutate(levels_label = ifelse(how_many_levels == 3, "All levels",
ifelse(how_many_levels == 2, trimws(gsub("NA and", "", paste(capwords(level_individual, strict = TRUE), capwords(level_community, strict = TRUE), capwords(level_place, strict = TRUE), sep = " and ")), which = "left"),
ifelse(how_many_levels == 1, capwords(level_js, strict = TRUE), NA)))) %>%
mutate(levels_label = gsub("NA ", "", levels_label)) %>%
mutate(partner_label = ifelse(grepl(",", partners, ignore.case = TRUE) == TRUE, "Multiple partners", partners)) %>%
mutate(partner_label = gsub("Western Sussex Hospitals NHS Foundation Trust", '<abbr title="Western Sussex Hospital NHS Foundation Trust">WSHFT</abbr>', partner_label)) %>%
mutate(partner_js = partners) %>%
mutate(partner_js = gsub("Trading Standards", "trading_standards", partner_js)) %>%
mutate(partner_js = gsub("Local Maternity System", "lms", partner_js)) %>%
mutate(partner_js = gsub("Wellbeing programme", "wellbeing_programme", partner_js, ignore.case = TRUE)) %>%
mutate(partner_js = gsub("Fire Service", "fire_service", partner_js)) %>%
mutate(partner_js = gsub("Public Health", "public_health", partner_js)) %>%
mutate(partner_js = gsub("Maternity at Western Hospitals", "maternity wsht", partner_js)) %>%
mutate(partner_js = gsub("Health4Families", "h4f", partner_js)) %>%
mutate(partner_js = gsub("Prisons", "prisons", partner_js)) %>%
mutate(partner_js = gsub("Communities", "communities", partner_js)) %>%
mutate(partner_js = gsub("Western Sussex Hospitals NHS Foundation Trust", "wsht", partner_js)) %>%
mutate(partner_js = gsub("Sussex Community NHS Foundation Trust", "scft", partner_js)) %>%
mutate(partner_js = gsub("Primary Care", "primary_care", partner_js)) %>%
mutate(partner_js = gsub("District & Boroughs", "dandb", partner_js)) %>%
mutate(partner_js = gsub(",", "", partner_js)) %>%
mutate(achieved_js = ifelse(achieved == 'Progress unknown', 'Unknown', achieved))
AP_ready <- AP_raw %>%
select(ap_number, ap_title, ap_text, success, progress, achieved, partners,partner_label, partner_js, hic_number, hic_label, hic_class, timeframe_js, timeframe_label, level_js, levels_label, achieved_js) %>%
mutate(div_1 = paste('<div class = "grid-item', hic_class, timeframe_js, level_js, partner_js,'">', sep = " ")) %>%
mutate(div_2 = paste0('<p class = "ap_number">',ap_number,'</p>')) %>%
mutate(div_3 = paste0('<p class = "ap_title">', ap_title,'</p>')) %>%
mutate(div_4 = paste0('<p class = "ap_text">', ap_text,'</p>')) %>%
mutate(div_5 = paste0('<p class = "sucess">', success,'</p>')) %>%
mutate(div_6 = paste0('<p class = "partner_label">', partner_label,'</p>')) %>%
mutate(div_7 = paste0('<p class = "hic_number">', hic_number,'</p>')) %>%
mutate(div_8 = paste0('<p class = "hic_label">', hic_label,'</p>')) %>%
mutate(div_9 = paste0('<p class = "timeframe_label">', timeframe_label,'</p>')) %>%
mutate(div_10 = paste0('<p class = "levels_label">', levels_label,'</p>')) %>%
mutate(div_11 = paste0('<div class="tooltip_',tolower(achieved_js),'">'),
div_12 = paste0("<h2>",ap_title, "</h2>"),
div_13 = paste0("<p>", ap_text, "</p>"),
div_14 = paste0("<h3>What will success look like?</h3>"),
div_15 = paste0("<p>", success, "</p>"),
div_16 = paste0("<h3>Who are key partners for this action?</h3>"),
div_17 = paste0("<p>",partners,"</p>"),
div_18 = paste0("<h3>How are we doing so far?</h3>"),
div_19 = paste0('<p>', progress,'</p>'),
div_20 = "</div>")
# Note we have removed the progress and achieved divs for the time being!! (div_9 and div_10)
AP_t <- gather(as.data.frame(t(AP_ready[c("div_1","div_2","div_3","div_4","div_6","div_7","div_8","div_9","div_10","div_11","div_12","div_13","div_14","div_15","div_16","div_17","div_18","div_19","div_20","div_20")])))
write.csv(AP_t[c("value")], "./actionplan_html.csv", row.names = FALSE)
# SFWS_Action_plan
library(tidyverse)
library(readxl)
setwd("/Users/richtyler/Documents/Repositories/SFWS")
capwords = function(s, strict = FALSE) {
cap = function(s) paste(toupper(substring(s, 1, 1)),
{s = substring(s, 2); if(strict) tolower(s) else s},sep = "", collapse = " " )
sapply(strsplit(s, split = " "), cap, USE.NAMES = !is.null(names(s)))}
AP_raw <- read_excel("./SFWS Action Plan partnership update Jan 2020.xlsx") %>%
mutate(timeframe_short = ifelse(grepl("S", timeframe, ignore.case = TRUE) == TRUE, "shortterm", NA),
timeframe_medium = ifelse(grepl("M", timeframe, ignore.case = TRUE) == TRUE, "mediumterm", NA),
timeframe_long = ifelse(grepl("L", timeframe, ignore.case = TRUE) == TRUE, "longterm", NA)) %>%
mutate(ongoing = ifelse(grepl("S", timeframe, ignore.case = TRUE) == TRUE & grepl("M", timeframe, ignore.case = TRUE) == TRUE & grepl("L", timeframe, ignore.case = TRUE) == TRUE, "ongoing", NA))  %>%
mutate(timeframe_js = trimws(gsub("NA", "", paste(timeframe_short, timeframe_medium, timeframe_long, ongoing, sep = " ")), which = "left")) %>%
mutate(level_individual = ifelse(grepl("I", level, ignore.case = TRUE) == TRUE, "individual", NA),
level_community = ifelse(grepl("C", level, ignore.case = TRUE) == TRUE, "community", NA),
level_place = ifelse(grepl("P", level, ignore.case = TRUE) == TRUE, "place", NA)) %>%
mutate(level_js = trimws(gsub("NA", "", paste(level_individual, level_community, level_place, sep = " ")), which = "left")) %>%
mutate(progress = ifelse(is.na(progress), 'Progress unknown', progress)) %>%
mutate(achieved = ifelse(is.na(achieved), 'Progress unknown', achieved)) %>%
mutate(progress = ifelse(is.na(`January update`), paste0(progress, '</p><h3>No update in January 2020</h3><p>'), ifelse(progress == 'Progress unknown', paste0('</p><h3>January update: </h3><p>', `January update`),  paste0(progress, '<h3>Janurary update: </h3><p>', `January update`))))
write.csv(AP_raw, "./actionplan_raw.csv", row.names = FALSE, na = "")
# We have to split the code here because the next part calls AP_raw which is not created until the end of the command
AP_raw <- AP_raw %>%
mutate(how_many_tf = rowSums(!is.na(AP_raw[c("timeframe_short", "timeframe_medium", "timeframe_long", "ongoing")]))) %>%
mutate(timeframe_label = ifelse(how_many_tf == 4, "Ongoing",
ifelse(how_many_tf == 2, trimws(gsub("NA and", "", paste(timeframe_short, timeframe_medium, timeframe_long, sep = " and ")), which = "left"),
ifelse(how_many_tf == 1, timeframe_js, NA)))) %>%
mutate(timeframe_label = gsub("NA ", "", timeframe_label)) %>%
mutate(timeframe_label = gsub("and NA", "", timeframe_label)) %>%
mutate(timeframe_label = gsub("shortterm", "Short term", timeframe_label)) %>%
mutate(timeframe_label = gsub("mediumterm", "Medium term", timeframe_label)) %>%
mutate(timeframe_label = gsub("longterm", "Long term", timeframe_label)) %>%
mutate(how_many_levels = rowSums(!is.na(AP_raw[c("level_individual", "level_community", "level_place")]))) %>%
mutate(levels_label = ifelse(how_many_levels == 3, "All levels",
ifelse(how_many_levels == 2, trimws(gsub("NA and", "", paste(capwords(level_individual, strict = TRUE), capwords(level_community, strict = TRUE), capwords(level_place, strict = TRUE), sep = " and ")), which = "left"),
ifelse(how_many_levels == 1, capwords(level_js, strict = TRUE), NA)))) %>%
mutate(levels_label = gsub("NA ", "", levels_label)) %>%
mutate(partner_label = ifelse(grepl(",", partners, ignore.case = TRUE) == TRUE, "Multiple partners", partners)) %>%
mutate(partner_label = gsub("Western Sussex Hospitals NHS Foundation Trust", '<abbr title="Western Sussex Hospital NHS Foundation Trust">WSHFT</abbr>', partner_label)) %>%
mutate(partner_js = partners) %>%
mutate(partner_js = gsub("Trading Standards", "trading_standards", partner_js)) %>%
mutate(partner_js = gsub("Local Maternity System", "lms", partner_js)) %>%
mutate(partner_js = gsub("Wellbeing programme", "wellbeing_programme", partner_js, ignore.case = TRUE)) %>%
mutate(partner_js = gsub("Fire Service", "fire_service", partner_js)) %>%
mutate(partner_js = gsub("Public Health", "public_health", partner_js)) %>%
mutate(partner_js = gsub("Maternity at Western Hospitals", "maternity wsht", partner_js)) %>%
mutate(partner_js = gsub("Health4Families", "h4f", partner_js)) %>%
mutate(partner_js = gsub("Prisons", "prisons", partner_js)) %>%
mutate(partner_js = gsub("Communities", "communities", partner_js)) %>%
mutate(partner_js = gsub("Western Sussex Hospitals NHS Foundation Trust", "wsht", partner_js)) %>%
mutate(partner_js = gsub("Sussex Community NHS Foundation Trust", "scft", partner_js)) %>%
mutate(partner_js = gsub("Primary Care", "primary_care", partner_js)) %>%
mutate(partner_js = gsub("District & Boroughs", "dandb", partner_js)) %>%
mutate(partner_js = gsub(",", "", partner_js)) %>%
mutate(achieved_js = ifelse(achieved == 'Progress unknown', 'Unknown', achieved))
# AP_ready <- AP_raw %>%
#   select(ap_number, ap_title, ap_text, success, progress, achieved, partners,partner_label, partner_js, hic_number, hic_label, hic_class, timeframe_js, timeframe_label, level_js, levels_label, achieved_js) %>%
#   mutate(div_1 = paste('<div class = "grid-item', hic_class, timeframe_js, level_js, partner_js,'">', sep = " ")) %>%
#   mutate(div_2 = paste0('<p class = "ap_number">',ap_number,'</p>')) %>%
#   mutate(div_3 = paste0('<p class = "ap_title">', ap_title,'</p>')) %>%
#   mutate(div_4 = paste0('<p class = "ap_text">', ap_text,'</p>')) %>%
#   mutate(div_5 = paste0('<p class = "sucess">', success,'</p>')) %>%
#   mutate(div_6 = paste0('<p class = "partner_label">', partner_label,'</p>')) %>%
#   mutate(div_7 = paste0('<p class = "hic_number">', hic_number,'</p>')) %>%
#   mutate(div_8 = paste0('<p class = "hic_label">', hic_label,'</p>')) %>%
#   mutate(div_9 = paste0('<p class = "timeframe_label">', timeframe_label,'</p>')) %>%
#   mutate(div_10 = paste0('<p class = "levels_label">', levels_label,'</p>')) %>%
#   mutate(div_11 = paste0('<div class="tooltip_',hic_class,'">'),
#          div_12 = paste0("<h2>",ap_title, "</h2>"),
#          div_13 = paste0("<p>", ap_text, "</p>"),
#          div_14 = paste0("<h3>What will success look like?</h3>"),
#          div_15 = paste0("<p>", success, "</p>"),
#          div_16 = paste0("<h3>Who are key partners for this action?</h3>"),
#          div_17 = paste0("<p>",partners,"</p>"),
#          div_18 = paste0("<h3>How are we doing so far?</h3>"),
#          div_19 = paste0('<p>', progress,'</p>'),
#          div_20 = "</div>")
AP_ready <- AP_raw %>%
select(ap_number, ap_title, ap_text, success, progress, achieved, partners,partner_label, partner_js, hic_number, hic_label, hic_class, timeframe_js, timeframe_label, level_js, levels_label, achieved_js) %>%
mutate(div_1 = paste('<div class = "grid-item', hic_class, timeframe_js, level_js, partner_js,'">', sep = " ")) %>%
mutate(div_2 = paste0('<p class = "ap_number">',ap_number,'</p>')) %>%
mutate(div_3 = paste0('<p class = "ap_title">', ap_title,'</p>')) %>%
mutate(div_4 = paste0('<p class = "ap_text">', ap_text,'</p>')) %>%
mutate(div_5 = paste0('<p class = "sucess">', success,'</p>')) %>%
mutate(div_6 = paste0('<p class = "partner_label">', partner_label,'</p>')) %>%
mutate(div_7 = paste0('<p class = "hic_number">', hic_number,'</p>')) %>%
mutate(div_8 = paste0('<p class = "hic_label">', hic_label,'</p>')) %>%
mutate(div_9 = paste0('<p class = "timeframe_label">', timeframe_label,'</p>')) %>%
mutate(div_10 = paste0('<p class = "levels_label">', levels_label,'</p>')) %>%
mutate(div_11 = paste0('<div class="tooltip_',tolower(achieved_js),'">'),
div_12 = paste0("<h2>",ap_title, "</h2>"),
div_13 = paste0("<p>", ap_text, "</p>"),
div_14 = paste0("<h3>What will success look like?</h3>"),
div_15 = paste0("<p>", success, "</p>"),
div_16 = paste0("<h3>Who are key partners for this action?</h3>"),
div_17 = paste0("<p>",partners,"</p>"),
div_18 = paste0("<h3>How are we doing so far?</h3>"),
div_19 = paste0('<p>', progress,'</p>'),
div_20 = "</div>")
# We could include links or an update of progress etc.
# Note we have removed the progress and achieved divs for the time being!! (div_9 and div_10)
AP_t <- gather(as.data.frame(t(AP_ready[c("div_1","div_2","div_3","div_4","div_6","div_7","div_8","div_9","div_10","div_11","div_12","div_13","div_14","div_15","div_16","div_17","div_18","div_19","div_20","div_20")])))
write.csv(AP_t[c("value")], "./actionplan_html.csv", row.names = FALSE)
# SFWS_Action_plan
library(tidyverse)
library(readxl)
setwd("/Users/richtyler/Documents/Repositories/SFWS")
capwords = function(s, strict = FALSE) {
cap = function(s) paste(toupper(substring(s, 1, 1)),
{s = substring(s, 2); if(strict) tolower(s) else s},sep = "", collapse = " " )
sapply(strsplit(s, split = " "), cap, USE.NAMES = !is.null(names(s)))}
AP_raw <- read_excel("./SFWS Action Plan partnership update Jan 2020.xlsx") %>%
mutate(timeframe_short = ifelse(grepl("S", timeframe, ignore.case = TRUE) == TRUE, "shortterm", NA),
timeframe_medium = ifelse(grepl("M", timeframe, ignore.case = TRUE) == TRUE, "mediumterm", NA),
timeframe_long = ifelse(grepl("L", timeframe, ignore.case = TRUE) == TRUE, "longterm", NA)) %>%
mutate(ongoing = ifelse(grepl("S", timeframe, ignore.case = TRUE) == TRUE & grepl("M", timeframe, ignore.case = TRUE) == TRUE & grepl("L", timeframe, ignore.case = TRUE) == TRUE, "ongoing", NA))  %>%
mutate(timeframe_js = trimws(gsub("NA", "", paste(timeframe_short, timeframe_medium, timeframe_long, ongoing, sep = " ")), which = "left")) %>%
mutate(level_individual = ifelse(grepl("I", level, ignore.case = TRUE) == TRUE, "individual", NA),
level_community = ifelse(grepl("C", level, ignore.case = TRUE) == TRUE, "community", NA),
level_place = ifelse(grepl("P", level, ignore.case = TRUE) == TRUE, "place", NA)) %>%
mutate(level_js = trimws(gsub("NA", "", paste(level_individual, level_community, level_place, sep = " ")), which = "left")) %>%
mutate(progress = ifelse(is.na(progress), 'Progress unknown', progress)) %>%
mutate(achieved = ifelse(is.na(achieved), 'Progress unknown', achieved)) %>%
mutate(progress = ifelse(is.na(`January update`), paste0(progress, '</p><h3>No update in January 2020</h3><p>'), ifelse(progress == 'Progress unknown', paste0('</p><h3>January update: </h3><p>', `January update`),  paste0(progress, '<h3>Janurary update: </h3><p>', `January update`))))
write.csv(AP_raw, "./actionplan_raw.csv", row.names = FALSE, na = "")
# We have to split the code here because the next part calls AP_raw which is not created until the end of the command
AP_raw <- AP_raw %>%
mutate(how_many_tf = rowSums(!is.na(AP_raw[c("timeframe_short", "timeframe_medium", "timeframe_long", "ongoing")]))) %>%
mutate(timeframe_label = ifelse(how_many_tf == 4, "Ongoing",
ifelse(how_many_tf == 2, trimws(gsub("NA and", "", paste(timeframe_short, timeframe_medium, timeframe_long, sep = " and ")), which = "left"),
ifelse(how_many_tf == 1, timeframe_js, NA)))) %>%
mutate(timeframe_label = gsub("NA ", "", timeframe_label)) %>%
mutate(timeframe_label = gsub("and NA", "", timeframe_label)) %>%
mutate(timeframe_label = gsub("shortterm", "Short term", timeframe_label)) %>%
mutate(timeframe_label = gsub("mediumterm", "Medium term", timeframe_label)) %>%
mutate(timeframe_label = gsub("longterm", "Long term", timeframe_label)) %>%
mutate(how_many_levels = rowSums(!is.na(AP_raw[c("level_individual", "level_community", "level_place")]))) %>%
mutate(levels_label = ifelse(how_many_levels == 3, "All levels",
ifelse(how_many_levels == 2, trimws(gsub("NA and", "", paste(capwords(level_individual, strict = TRUE), capwords(level_community, strict = TRUE), capwords(level_place, strict = TRUE), sep = " and ")), which = "left"),
ifelse(how_many_levels == 1, capwords(level_js, strict = TRUE), NA)))) %>%
mutate(levels_label = gsub("NA ", "", levels_label)) %>%
mutate(partner_label = ifelse(grepl(",", partners, ignore.case = TRUE) == TRUE, "Multiple partners", partners)) %>%
mutate(partner_label = gsub("Western Sussex Hospitals NHS Foundation Trust", '<abbr title="Western Sussex Hospital NHS Foundation Trust">WSHFT</abbr>', partner_label)) %>%
mutate(partner_js = partners) %>%
mutate(partner_js = gsub("Trading Standards", "trading_standards", partner_js)) %>%
mutate(partner_js = gsub("Local Maternity System", "lms", partner_js)) %>%
mutate(partner_js = gsub("Wellbeing programme", "wellbeing_programme", partner_js, ignore.case = TRUE)) %>%
mutate(partner_js = gsub("Fire Service", "fire_service", partner_js)) %>%
mutate(partner_js = gsub("Public Health", "public_health", partner_js)) %>%
mutate(partner_js = gsub("Maternity at Western Hospitals", "maternity wsht", partner_js)) %>%
mutate(partner_js = gsub("Health4Families", "h4f", partner_js)) %>%
mutate(partner_js = gsub("Prisons", "prisons", partner_js)) %>%
mutate(partner_js = gsub("Communities", "communities", partner_js)) %>%
mutate(partner_js = gsub("Western Sussex Hospitals NHS Foundation Trust", "wsht", partner_js)) %>%
mutate(partner_js = gsub("Sussex Community NHS Foundation Trust", "scft", partner_js)) %>%
mutate(partner_js = gsub("Primary Care", "primary_care", partner_js)) %>%
mutate(partner_js = gsub("District & Boroughs", "dandb", partner_js)) %>%
mutate(partner_js = gsub(",", "", partner_js)) %>%
mutate(achieved_js = ifelse(achieved == 'Progress unknown', 'Unknown', achieved))
# AP_ready <- AP_raw %>%
#   select(ap_number, ap_title, ap_text, success, progress, achieved, partners,partner_label, partner_js, hic_number, hic_label, hic_class, timeframe_js, timeframe_label, level_js, levels_label, achieved_js) %>%
#   mutate(div_1 = paste('<div class = "grid-item', hic_class, timeframe_js, level_js, partner_js,'">', sep = " ")) %>%
#   mutate(div_2 = paste0('<p class = "ap_number">',ap_number,'</p>')) %>%
#   mutate(div_3 = paste0('<p class = "ap_title">', ap_title,'</p>')) %>%
#   mutate(div_4 = paste0('<p class = "ap_text">', ap_text,'</p>')) %>%
#   mutate(div_5 = paste0('<p class = "sucess">', success,'</p>')) %>%
#   mutate(div_6 = paste0('<p class = "partner_label">', partner_label,'</p>')) %>%
#   mutate(div_7 = paste0('<p class = "hic_number">', hic_number,'</p>')) %>%
#   mutate(div_8 = paste0('<p class = "hic_label">', hic_label,'</p>')) %>%
#   mutate(div_9 = paste0('<p class = "timeframe_label">', timeframe_label,'</p>')) %>%
#   mutate(div_10 = paste0('<p class = "levels_label">', levels_label,'</p>')) %>%
#   mutate(div_11 = paste0('<div class="tooltip_',hic_class,'">'),
#          div_12 = paste0("<h2>",ap_title, "</h2>"),
#          div_13 = paste0("<p>", ap_text, "</p>"),
#          div_14 = paste0("<h3>What will success look like?</h3>"),
#          div_15 = paste0("<p>", success, "</p>"),
#          div_16 = paste0("<h3>Who are key partners for this action?</h3>"),
#          div_17 = paste0("<p>",partners,"</p>"),
#          div_18 = paste0("<h3>How are we doing so far?</h3>"),
#          div_19 = paste0('<p>', progress,'</p>'),
#          div_20 = "</div>")
AP_ready <- AP_raw %>%
select(ap_number, ap_title, ap_text, success, progress, achieved, partners,partner_label, partner_js, hic_number, hic_label, hic_class, timeframe_js, timeframe_label, level_js, levels_label, achieved_js) %>%
mutate(div_1 = paste('<div class = "grid-item', hic_class, timeframe_js, level_js, partner_js,'">', sep = " ")) %>%
mutate(div_2 = paste0('<p class = "ap_number">',ap_number,'</p>')) %>%
mutate(div_3 = paste0('<p class = "ap_title">', ap_title,'</p>')) %>%
mutate(div_4 = paste0('<p class = "ap_text">', ap_text,'</p>')) %>%
mutate(div_5 = paste0('<p class = "sucess">', success,'</p>')) %>%
mutate(div_6 = paste0('<p class = "partner_label">', partner_label,'</p>')) %>%
mutate(div_7 = paste0('<p class = "hic_number">', hic_number,'</p>')) %>%
mutate(div_8 = paste0('<p class = "hic_label">', hic_label,'</p>')) %>%
mutate(div_9 = paste0('<p class = "timeframe_label">', timeframe_label,'</p>')) %>%
mutate(div_10 = paste0('<p class = "levels_label">', levels_label,'</p>')) %>%
mutate(div_11 = paste0('<div class="tooltip_',tolower(achieved_js),'">'),
div_12 = paste0("<h2>",ap_title, "</h2>"),
div_13 = paste0("<p>", ap_text, "</p>"),
div_14 = paste0("<h3>What will success look like?</h3>"),
div_15 = paste0("<p>", success, "</p>"),
div_16 = paste0("<h3>Who are key partners for this action?</h3>"),
div_17 = paste0("<p>",partners,"</p>"),
div_18 = paste0("<h3>How are we doing so far?</h3>"),
div_19 = paste0('<p>', progress,'</p>'),
div_20 = "</div>")
# We could include links or an update of progress etc.
# Note we have removed the progress and achieved divs for the time being!! (div_9 and div_10)
AP_t <- gather(as.data.frame(t(AP_ready[c("div_1","div_2","div_3","div_4","div_6","div_7","div_8","div_9","div_10","div_11","div_12","div_13","div_14","div_15","div_16","div_17","div_18","div_19","div_20","div_20")])))
write.csv(AP_t[c("value")], "./actionplan_html.csv", row.names = FALSE)
# SFWS_Action_plan
library(tidyverse)
library(readxl)
setwd("/Users/richtyler/Documents/Repositories/SFWS")
capwords = function(s, strict = FALSE) {
cap = function(s) paste(toupper(substring(s, 1, 1)),
{s = substring(s, 2); if(strict) tolower(s) else s},sep = "", collapse = " " )
sapply(strsplit(s, split = " "), cap, USE.NAMES = !is.null(names(s)))}
AP_raw <- read_excel("./SFWS Action Plan partnership update Jan 2020.xlsx") %>%
mutate(timeframe_short = ifelse(grepl("S", timeframe, ignore.case = TRUE) == TRUE, "shortterm", NA),
timeframe_medium = ifelse(grepl("M", timeframe, ignore.case = TRUE) == TRUE, "mediumterm", NA),
timeframe_long = ifelse(grepl("L", timeframe, ignore.case = TRUE) == TRUE, "longterm", NA)) %>%
mutate(ongoing = ifelse(grepl("S", timeframe, ignore.case = TRUE) == TRUE & grepl("M", timeframe, ignore.case = TRUE) == TRUE & grepl("L", timeframe, ignore.case = TRUE) == TRUE, "ongoing", NA))  %>%
mutate(timeframe_js = trimws(gsub("NA", "", paste(timeframe_short, timeframe_medium, timeframe_long, ongoing, sep = " ")), which = "left")) %>%
mutate(level_individual = ifelse(grepl("I", level, ignore.case = TRUE) == TRUE, "individual", NA),
level_community = ifelse(grepl("C", level, ignore.case = TRUE) == TRUE, "community", NA),
level_place = ifelse(grepl("P", level, ignore.case = TRUE) == TRUE, "place", NA)) %>%
mutate(level_js = trimws(gsub("NA", "", paste(level_individual, level_community, level_place, sep = " ")), which = "left")) %>%
mutate(progress = ifelse(is.na(progress), 'Progress unknown', progress)) %>%
mutate(achieved = ifelse(is.na(achieved), 'Progress unknown', achieved)) %>%
mutate(progress = ifelse(is.na(`January update`), paste0(progress, '</p><h3>No update in January 2020</h3><p>'), ifelse(progress == 'Progress unknown', paste0('</p><h3>January update: </h3><p>', `January update`),  paste0(progress, '</p><h3>Janurary update: </h3><p>', `January update`))))
write.csv(AP_raw, "./actionplan_raw.csv", row.names = FALSE, na = "")
# We have to split the code here because the next part calls AP_raw which is not created until the end of the command
AP_raw <- AP_raw %>%
mutate(how_many_tf = rowSums(!is.na(AP_raw[c("timeframe_short", "timeframe_medium", "timeframe_long", "ongoing")]))) %>%
mutate(timeframe_label = ifelse(how_many_tf == 4, "Ongoing",
ifelse(how_many_tf == 2, trimws(gsub("NA and", "", paste(timeframe_short, timeframe_medium, timeframe_long, sep = " and ")), which = "left"),
ifelse(how_many_tf == 1, timeframe_js, NA)))) %>%
mutate(timeframe_label = gsub("NA ", "", timeframe_label)) %>%
mutate(timeframe_label = gsub("and NA", "", timeframe_label)) %>%
mutate(timeframe_label = gsub("shortterm", "Short term", timeframe_label)) %>%
mutate(timeframe_label = gsub("mediumterm", "Medium term", timeframe_label)) %>%
mutate(timeframe_label = gsub("longterm", "Long term", timeframe_label)) %>%
mutate(how_many_levels = rowSums(!is.na(AP_raw[c("level_individual", "level_community", "level_place")]))) %>%
mutate(levels_label = ifelse(how_many_levels == 3, "All levels",
ifelse(how_many_levels == 2, trimws(gsub("NA and", "", paste(capwords(level_individual, strict = TRUE), capwords(level_community, strict = TRUE), capwords(level_place, strict = TRUE), sep = " and ")), which = "left"),
ifelse(how_many_levels == 1, capwords(level_js, strict = TRUE), NA)))) %>%
mutate(levels_label = gsub("NA ", "", levels_label)) %>%
mutate(partner_label = ifelse(grepl(",", partners, ignore.case = TRUE) == TRUE, "Multiple partners", partners)) %>%
mutate(partner_label = gsub("Western Sussex Hospitals NHS Foundation Trust", '<abbr title="Western Sussex Hospital NHS Foundation Trust">WSHFT</abbr>', partner_label)) %>%
mutate(partner_js = partners) %>%
mutate(partner_js = gsub("Trading Standards", "trading_standards", partner_js)) %>%
mutate(partner_js = gsub("Local Maternity System", "lms", partner_js)) %>%
mutate(partner_js = gsub("Wellbeing programme", "wellbeing_programme", partner_js, ignore.case = TRUE)) %>%
mutate(partner_js = gsub("Fire Service", "fire_service", partner_js)) %>%
mutate(partner_js = gsub("Public Health", "public_health", partner_js)) %>%
mutate(partner_js = gsub("Maternity at Western Hospitals", "maternity wsht", partner_js)) %>%
mutate(partner_js = gsub("Health4Families", "h4f", partner_js)) %>%
mutate(partner_js = gsub("Prisons", "prisons", partner_js)) %>%
mutate(partner_js = gsub("Communities", "communities", partner_js)) %>%
mutate(partner_js = gsub("Western Sussex Hospitals NHS Foundation Trust", "wsht", partner_js)) %>%
mutate(partner_js = gsub("Sussex Community NHS Foundation Trust", "scft", partner_js)) %>%
mutate(partner_js = gsub("Primary Care", "primary_care", partner_js)) %>%
mutate(partner_js = gsub("District & Boroughs", "dandb", partner_js)) %>%
mutate(partner_js = gsub(",", "", partner_js)) %>%
mutate(achieved_js = ifelse(achieved == 'Progress unknown', 'Unknown', achieved))
# AP_ready <- AP_raw %>%
#   select(ap_number, ap_title, ap_text, success, progress, achieved, partners,partner_label, partner_js, hic_number, hic_label, hic_class, timeframe_js, timeframe_label, level_js, levels_label, achieved_js) %>%
#   mutate(div_1 = paste('<div class = "grid-item', hic_class, timeframe_js, level_js, partner_js,'">', sep = " ")) %>%
#   mutate(div_2 = paste0('<p class = "ap_number">',ap_number,'</p>')) %>%
#   mutate(div_3 = paste0('<p class = "ap_title">', ap_title,'</p>')) %>%
#   mutate(div_4 = paste0('<p class = "ap_text">', ap_text,'</p>')) %>%
#   mutate(div_5 = paste0('<p class = "sucess">', success,'</p>')) %>%
#   mutate(div_6 = paste0('<p class = "partner_label">', partner_label,'</p>')) %>%
#   mutate(div_7 = paste0('<p class = "hic_number">', hic_number,'</p>')) %>%
#   mutate(div_8 = paste0('<p class = "hic_label">', hic_label,'</p>')) %>%
#   mutate(div_9 = paste0('<p class = "timeframe_label">', timeframe_label,'</p>')) %>%
#   mutate(div_10 = paste0('<p class = "levels_label">', levels_label,'</p>')) %>%
#   mutate(div_11 = paste0('<div class="tooltip_',hic_class,'">'),
#          div_12 = paste0("<h2>",ap_title, "</h2>"),
#          div_13 = paste0("<p>", ap_text, "</p>"),
#          div_14 = paste0("<h3>What will success look like?</h3>"),
#          div_15 = paste0("<p>", success, "</p>"),
#          div_16 = paste0("<h3>Who are key partners for this action?</h3>"),
#          div_17 = paste0("<p>",partners,"</p>"),
#          div_18 = paste0("<h3>How are we doing so far?</h3>"),
#          div_19 = paste0('<p>', progress,'</p>'),
#          div_20 = "</div>")
AP_ready <- AP_raw %>%
select(ap_number, ap_title, ap_text, success, progress, achieved, partners,partner_label, partner_js, hic_number, hic_label, hic_class, timeframe_js, timeframe_label, level_js, levels_label, achieved_js) %>%
mutate(div_1 = paste('<div class = "grid-item', hic_class, timeframe_js, level_js, partner_js,'">', sep = " ")) %>%
mutate(div_2 = paste0('<p class = "ap_number">',ap_number,'</p>')) %>%
mutate(div_3 = paste0('<p class = "ap_title">', ap_title,'</p>')) %>%
mutate(div_4 = paste0('<p class = "ap_text">', ap_text,'</p>')) %>%
mutate(div_5 = paste0('<p class = "sucess">', success,'</p>')) %>%
mutate(div_6 = paste0('<p class = "partner_label">', partner_label,'</p>')) %>%
mutate(div_7 = paste0('<p class = "hic_number">', hic_number,'</p>')) %>%
mutate(div_8 = paste0('<p class = "hic_label">', hic_label,'</p>')) %>%
mutate(div_9 = paste0('<p class = "timeframe_label">', timeframe_label,'</p>')) %>%
mutate(div_10 = paste0('<p class = "levels_label">', levels_label,'</p>')) %>%
mutate(div_11 = paste0('<div class="tooltip_',tolower(achieved_js),'">'),
div_12 = paste0("<h2>",ap_title, "</h2>"),
div_13 = paste0("<p>", ap_text, "</p>"),
div_14 = paste0("<h3>What will success look like?</h3>"),
div_15 = paste0("<p>", success, "</p>"),
div_16 = paste0("<h3>Who are key partners for this action?</h3>"),
div_17 = paste0("<p>",partners,"</p>"),
div_18 = paste0("<h3>How are we doing so far?</h3>"),
div_19 = paste0('<p>', progress,'</p>'),
div_20 = "</div>")
# We could include links or an update of progress etc.
# Note we have removed the progress and achieved divs for the time being!! (div_9 and div_10)
AP_t <- gather(as.data.frame(t(AP_ready[c("div_1","div_2","div_3","div_4","div_6","div_7","div_8","div_9","div_10","div_11","div_12","div_13","div_14","div_15","div_16","div_17","div_18","div_19","div_20","div_20")])))
write.csv(AP_t[c("value")], "./actionplan_html.csv", row.names = FALSE)
